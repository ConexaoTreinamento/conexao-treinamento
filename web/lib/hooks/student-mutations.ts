import { useMutation, useQueryClient } from "@tanstack/react-query";
import { createMutation, deleteMutation, restoreMutation } from "@/lib/api-client/@tanstack/react-query.gen";

/**
 * Hooks that wrap generated mutation factories and add onSuccess invalidations
 * for the students list (findAll).
 *
 * These avoid editing autogenerated files and centralize invalidation logic.
 */

export const useCreateStudent = () => {
  const queryClient = useQueryClient();
  const base = createMutation();

  return useMutation({
    ...base,
    onSuccess: async (...args) => {
      // call generator-provided onSuccess if present
      try {
        if (base.onSuccess) await (base.onSuccess)(...args);
      } catch (e) {
        // ignore
      }
      await queryClient.invalidateQueries({
        predicate: (q) => Array.isArray(q.queryKey) && q.queryKey[0]?._id === "findAll",
      });
    },
  });
};

export const useDeleteStudent = () => {
  const queryClient = useQueryClient();
  const base = deleteMutation();

  return useMutation({
    ...base,
    onSuccess: async (...args) => {
      if (base.onSuccess) await (base.onSuccess)(...args);
      await queryClient.invalidateQueries({
        predicate: (q) => Array.isArray(q.queryKey) && q.queryKey[0]?._id === "findAll",
      });
    },
  });
};

export const useRestoreStudent = () => {
  const queryClient = useQueryClient();
  const base = restoreMutation();

  return useMutation({
    ...base,
    onSuccess: async (...args) => {
      if (base.onSuccess) await (base.onSuccess)(...args);
      await queryClient.invalidateQueries({
        predicate: (q) => Array.isArray(q.queryKey) && q.queryKey[0]?._id === "findAll",
      });
    },
  });
};
