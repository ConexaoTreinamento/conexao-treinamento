import {useMutation, UseMutationOptions, useQueryClient} from "@tanstack/react-query";
import {
  createMutation,
  deleteMutation, findByIdOptions,
  restoreMutation,
  updateMutation
} from "@/lib/api-client/@tanstack/react-query.gen";
import {Options, StudentResponseDto, type UpdateData} from "@/lib/api-client";
import {apiClient} from "@/lib/client";

/**
 * Hooks that wrap generated mutation factories and add onSuccess invalidations
 * for the students list (findAll).
 *
 * These avoid editing autogenerated files and centralize invalidation logic.
 */

export const useCreateStudent = () => {
  const queryClient = useQueryClient();
  const base = createMutation();

  return useMutation({
    ...base,
    onSuccess: async (...args) => {
      try {
        if (base.onSuccess) {
          await (base.onSuccess)(...args);
        }
      } catch (e) {
        // ignore
      }
      await queryClient.invalidateQueries({
        predicate: (q) => Array.isArray(q.queryKey) && q.queryKey[0]?._id === "findAll",
      });
    },
  });
};

export const useUpdateStudent = (options: UseMutationOptions<StudentResponseDto, Error, Options<UpdateData>, unknown>) => {
  const queryClient = useQueryClient();

  return useMutation({
    ...updateMutation(),
    ...options,
    onSuccess: async (...args) => {
      if (options.onSuccess) {
        try {
          await options.onSuccess(...args)
        } catch (e) {
          // ignore
        }
      }
      // Invalidate the students list
      await Promise.all([queryClient.invalidateQueries({
        predicate: (q) => Array.isArray(q.queryKey) && q.queryKey[0]?._id === 'findAll'
      }),
        // Invalidate the specific cached student (findById) so the details refresh
        queryClient.invalidateQueries({
          queryKey: findByIdOptions({path: {id: args[1].path.id ?? ""}, client: apiClient}).queryKey
        })])
    }
  });
};

export const useDeleteStudent = () => {
  const queryClient = useQueryClient();
  const base = deleteMutation();

  return useMutation({
    ...base,
    onSuccess: async (...args) => {
      if (base.onSuccess) {
        await (base.onSuccess)(...args);
      }
      await queryClient.invalidateQueries({
        predicate: (q) => Array.isArray(q.queryKey) && q.queryKey[0]?._id === "findAll",
      });
    },
  });
};

export const useRestoreStudent = () => {
  const queryClient = useQueryClient();
  const base = restoreMutation();

  return useMutation({
    ...base,
    onSuccess: async (...args) => {
      if (base.onSuccess) await (base.onSuccess)(...args);
      await queryClient.invalidateQueries({
        predicate: (q) => Array.isArray(q.queryKey) && q.queryKey[0]?._id === "findAll",
      });
    },
  });
};
