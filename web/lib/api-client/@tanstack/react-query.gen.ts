// This file is auto-generated by @hey-api/openapi-ts

import { type Options, softDeleteTrainerUser, findTrainerById, updateTrainerAndUser, deleteSchedule, getScheduleById, updateSchedule, deleteStudent, findStudentById, updateStudent, deleteExercise, findExerciseById, patchExercise, updateExercise, deleteEvent, findEventById, patchEvent, updateEvent, deleteAdministrator, findAdministratorById, patchAdministrator, updateAdministrator, getAllUsersSimple, createUser, findAllTrainers, createTrainerAndUser, getAllSchedules, createSchedule, findAllStudents, createStudent, getSession, updateSession, updateSessionTrainer, addSessionParticipant, updatePresence, addRegisteredParticipantExercise, cancelOrRestoreSession, createOneOffSession, getAllPlans, createPlan, assignPlanToStudent, findAllExercises, createExercise, findAllEvents, createEvent, removeParticipant, addParticipant, updateCommitment, bulkUpdateCommitments, logout, login, findAllAdministrators, createAdministrator, patch, restoreStudent, removeRegisteredParticipantExercise, updateRegisteredParticipantExercise, restoreExercise, restoreEvent, toggleAttendance, restoreAdministrator, findTrainerByUserId, getSchedulesByTrainer, getSchedule, deletePlan, getPlanById, getStudentPlanHistory, getCurrentStudentPlan, getExpiringSoonAssignments, getAllActiveAssignments, getTrainersForLookup, getStudentsForLookup, getStudentCommitments, getCurrentCommitmentStatus, getCommitmentHistory, getCurrentActiveCommitments, getSessionSeriesCommitments, getAvailableSessionSeries, removeSessionParticipant } from '../sdk.gen';
import { type UseMutationOptions, type DefaultError, queryOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { SoftDeleteTrainerUserData, FindTrainerByIdData, UpdateTrainerAndUserData, UpdateTrainerAndUserResponse, DeleteScheduleData, GetScheduleByIdData, UpdateScheduleData, UpdateScheduleResponse, DeleteStudentData, FindStudentByIdData, UpdateStudentData, UpdateStudentResponse, DeleteExerciseData, FindExerciseByIdData, PatchExerciseData, PatchExerciseResponse, UpdateExerciseData, UpdateExerciseResponse, DeleteEventData, FindEventByIdData, PatchEventData, PatchEventResponse, UpdateEventData, UpdateEventResponse, DeleteAdministratorData, FindAdministratorByIdData, PatchAdministratorData, PatchAdministratorResponse, UpdateAdministratorData, UpdateAdministratorResponse, GetAllUsersSimpleData, GetAllUsersSimpleResponse, CreateUserData, CreateUserResponse, FindAllTrainersData, CreateTrainerAndUserData, CreateTrainerAndUserResponse, GetAllSchedulesData, CreateScheduleData, CreateScheduleResponse, FindAllStudentsData, FindAllStudentsResponse, CreateStudentData, CreateStudentResponse, GetSessionData, UpdateSessionData, UpdateSessionResponse, UpdateSessionTrainerData, UpdateSessionTrainerResponse, AddSessionParticipantData, AddSessionParticipantResponse, UpdatePresenceData, UpdatePresenceResponse, AddRegisteredParticipantExerciseData, AddRegisteredParticipantExerciseResponse, CancelOrRestoreSessionData, CancelOrRestoreSessionResponse, CreateOneOffSessionData, CreateOneOffSessionResponse, GetAllPlansData, CreatePlanData, CreatePlanResponse, AssignPlanToStudentData, AssignPlanToStudentResponse, FindAllExercisesData, FindAllExercisesResponse, CreateExerciseData, CreateExerciseResponse, FindAllEventsData, CreateEventData, CreateEventResponse, RemoveParticipantData, AddParticipantData, AddParticipantResponse, UpdateCommitmentData, UpdateCommitmentResponse, BulkUpdateCommitmentsData, BulkUpdateCommitmentsResponse, LogoutData, LogoutResponse, LoginData, LoginResponse, FindAllAdministratorsData, FindAllAdministratorsResponse, CreateAdministratorData, CreateAdministratorResponse, PatchData, PatchResponse, RestoreStudentData, RestoreStudentResponse, RemoveRegisteredParticipantExerciseData, RemoveRegisteredParticipantExerciseResponse, UpdateRegisteredParticipantExerciseData, UpdateRegisteredParticipantExerciseResponse, RestoreExerciseData, RestoreExerciseResponse, RestoreEventData, RestoreEventResponse, ToggleAttendanceData, ToggleAttendanceResponse, RestoreAdministratorData, RestoreAdministratorResponse, FindTrainerByUserIdData, GetSchedulesByTrainerData, GetScheduleData, DeletePlanData, GetPlanByIdData, GetStudentPlanHistoryData, GetCurrentStudentPlanData, GetExpiringSoonAssignmentsData, GetAllActiveAssignmentsData, GetTrainersForLookupData, GetStudentsForLookupData, GetStudentCommitmentsData, GetCurrentCommitmentStatusData, GetCommitmentHistoryData, GetCurrentActiveCommitmentsData, GetSessionSeriesCommitmentsData, GetAvailableSessionSeriesData, RemoveSessionParticipantData, RemoveSessionParticipantResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export const softDeleteTrainerUserMutation = (options?: Partial<Options<SoftDeleteTrainerUserData>>): UseMutationOptions<unknown, DefaultError, Options<SoftDeleteTrainerUserData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<SoftDeleteTrainerUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await softDeleteTrainerUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const findTrainerByIdQueryKey = (options: Options<FindTrainerByIdData>) => createQueryKey('findTrainerById', options);

export const findTrainerByIdOptions = (options: Options<FindTrainerByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findTrainerById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findTrainerByIdQueryKey(options)
    });
};

export const updateTrainerAndUserMutation = (options?: Partial<Options<UpdateTrainerAndUserData>>): UseMutationOptions<UpdateTrainerAndUserResponse, DefaultError, Options<UpdateTrainerAndUserData>> => {
    const mutationOptions: UseMutationOptions<UpdateTrainerAndUserResponse, DefaultError, Options<UpdateTrainerAndUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateTrainerAndUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteScheduleMutation = (options?: Partial<Options<DeleteScheduleData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteScheduleData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteScheduleData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteSchedule({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getScheduleByIdQueryKey = (options: Options<GetScheduleByIdData>) => createQueryKey('getScheduleById', options);

export const getScheduleByIdOptions = (options: Options<GetScheduleByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getScheduleById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getScheduleByIdQueryKey(options)
    });
};

export const updateScheduleMutation = (options?: Partial<Options<UpdateScheduleData>>): UseMutationOptions<UpdateScheduleResponse, DefaultError, Options<UpdateScheduleData>> => {
    const mutationOptions: UseMutationOptions<UpdateScheduleResponse, DefaultError, Options<UpdateScheduleData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateSchedule({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteStudentMutation = (options?: Partial<Options<DeleteStudentData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteStudentData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteStudentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteStudent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findStudentByIdQueryKey = (options: Options<FindStudentByIdData>) => createQueryKey('findStudentById', options);

export const findStudentByIdOptions = (options: Options<FindStudentByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findStudentById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findStudentByIdQueryKey(options)
    });
};

export const updateStudentMutation = (options?: Partial<Options<UpdateStudentData>>): UseMutationOptions<UpdateStudentResponse, DefaultError, Options<UpdateStudentData>> => {
    const mutationOptions: UseMutationOptions<UpdateStudentResponse, DefaultError, Options<UpdateStudentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateStudent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteExerciseMutation = (options?: Partial<Options<DeleteExerciseData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteExerciseData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteExerciseData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteExercise({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findExerciseByIdQueryKey = (options: Options<FindExerciseByIdData>) => createQueryKey('findExerciseById', options);

export const findExerciseByIdOptions = (options: Options<FindExerciseByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findExerciseById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findExerciseByIdQueryKey(options)
    });
};

export const patchExerciseMutation = (options?: Partial<Options<PatchExerciseData>>): UseMutationOptions<PatchExerciseResponse, DefaultError, Options<PatchExerciseData>> => {
    const mutationOptions: UseMutationOptions<PatchExerciseResponse, DefaultError, Options<PatchExerciseData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchExercise({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateExerciseMutation = (options?: Partial<Options<UpdateExerciseData>>): UseMutationOptions<UpdateExerciseResponse, DefaultError, Options<UpdateExerciseData>> => {
    const mutationOptions: UseMutationOptions<UpdateExerciseResponse, DefaultError, Options<UpdateExerciseData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateExercise({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteEventMutation = (options?: Partial<Options<DeleteEventData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteEventData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findEventByIdQueryKey = (options: Options<FindEventByIdData>) => createQueryKey('findEventById', options);

export const findEventByIdOptions = (options: Options<FindEventByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findEventById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findEventByIdQueryKey(options)
    });
};

export const patchEventMutation = (options?: Partial<Options<PatchEventData>>): UseMutationOptions<PatchEventResponse, DefaultError, Options<PatchEventData>> => {
    const mutationOptions: UseMutationOptions<PatchEventResponse, DefaultError, Options<PatchEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateEventMutation = (options?: Partial<Options<UpdateEventData>>): UseMutationOptions<UpdateEventResponse, DefaultError, Options<UpdateEventData>> => {
    const mutationOptions: UseMutationOptions<UpdateEventResponse, DefaultError, Options<UpdateEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteAdministratorMutation = (options?: Partial<Options<DeleteAdministratorData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteAdministratorData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteAdministratorData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteAdministrator({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findAdministratorByIdQueryKey = (options: Options<FindAdministratorByIdData>) => createQueryKey('findAdministratorById', options);

export const findAdministratorByIdOptions = (options: Options<FindAdministratorByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findAdministratorById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAdministratorByIdQueryKey(options)
    });
};

export const patchAdministratorMutation = (options?: Partial<Options<PatchAdministratorData>>): UseMutationOptions<PatchAdministratorResponse, DefaultError, Options<PatchAdministratorData>> => {
    const mutationOptions: UseMutationOptions<PatchAdministratorResponse, DefaultError, Options<PatchAdministratorData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchAdministrator({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateAdministratorMutation = (options?: Partial<Options<UpdateAdministratorData>>): UseMutationOptions<UpdateAdministratorResponse, DefaultError, Options<UpdateAdministratorData>> => {
    const mutationOptions: UseMutationOptions<UpdateAdministratorResponse, DefaultError, Options<UpdateAdministratorData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateAdministrator({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllUsersSimpleQueryKey = (options: Options<GetAllUsersSimpleData>) => createQueryKey('getAllUsersSimple', options);

export const getAllUsersSimpleOptions = (options: Options<GetAllUsersSimpleData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllUsersSimple({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllUsersSimpleQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getAllUsersSimpleInfiniteQueryKey = (options: Options<GetAllUsersSimpleData>): QueryKey<Options<GetAllUsersSimpleData>> => createQueryKey('getAllUsersSimple', options, true);

export const getAllUsersSimpleInfiniteOptions = (options: Options<GetAllUsersSimpleData>) => {
    return infiniteQueryOptions<GetAllUsersSimpleResponse, DefaultError, InfiniteData<GetAllUsersSimpleResponse>, QueryKey<Options<GetAllUsersSimpleData>>, number | Pick<QueryKey<Options<GetAllUsersSimpleData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetAllUsersSimpleData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    'pageable.page': pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAllUsersSimple({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllUsersSimpleInfiniteQueryKey(options)
    });
};

export const createUserQueryKey = (options: Options<CreateUserData>) => createQueryKey('createUser', options);

export const createUserOptions = (options: Options<CreateUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createUserQueryKey(options)
    });
};

export const createUserMutation = (options?: Partial<Options<CreateUserData>>): UseMutationOptions<CreateUserResponse, DefaultError, Options<CreateUserData>> => {
    const mutationOptions: UseMutationOptions<CreateUserResponse, DefaultError, Options<CreateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findAllTrainersQueryKey = (options?: Options<FindAllTrainersData>) => createQueryKey('findAllTrainers', options);

export const findAllTrainersOptions = (options?: Options<FindAllTrainersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findAllTrainers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAllTrainersQueryKey(options)
    });
};

export const createTrainerAndUserQueryKey = (options: Options<CreateTrainerAndUserData>) => createQueryKey('createTrainerAndUser', options);

export const createTrainerAndUserOptions = (options: Options<CreateTrainerAndUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createTrainerAndUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createTrainerAndUserQueryKey(options)
    });
};

export const createTrainerAndUserMutation = (options?: Partial<Options<CreateTrainerAndUserData>>): UseMutationOptions<CreateTrainerAndUserResponse, DefaultError, Options<CreateTrainerAndUserData>> => {
    const mutationOptions: UseMutationOptions<CreateTrainerAndUserResponse, DefaultError, Options<CreateTrainerAndUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTrainerAndUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllSchedulesQueryKey = (options?: Options<GetAllSchedulesData>) => createQueryKey('getAllSchedules', options);

export const getAllSchedulesOptions = (options?: Options<GetAllSchedulesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllSchedules({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllSchedulesQueryKey(options)
    });
};

export const createScheduleQueryKey = (options: Options<CreateScheduleData>) => createQueryKey('createSchedule', options);

export const createScheduleOptions = (options: Options<CreateScheduleData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createSchedule({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createScheduleQueryKey(options)
    });
};

export const createScheduleMutation = (options?: Partial<Options<CreateScheduleData>>): UseMutationOptions<CreateScheduleResponse, DefaultError, Options<CreateScheduleData>> => {
    const mutationOptions: UseMutationOptions<CreateScheduleResponse, DefaultError, Options<CreateScheduleData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createSchedule({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findAllStudentsQueryKey = (options: Options<FindAllStudentsData>) => createQueryKey('findAllStudents', options);

export const findAllStudentsOptions = (options: Options<FindAllStudentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findAllStudents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAllStudentsQueryKey(options)
    });
};

export const findAllStudentsInfiniteQueryKey = (options: Options<FindAllStudentsData>): QueryKey<Options<FindAllStudentsData>> => createQueryKey('findAllStudents', options, true);

export const findAllStudentsInfiniteOptions = (options: Options<FindAllStudentsData>) => {
    return infiniteQueryOptions<FindAllStudentsResponse, DefaultError, InfiniteData<FindAllStudentsResponse>, QueryKey<Options<FindAllStudentsData>>, number | Pick<QueryKey<Options<FindAllStudentsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<FindAllStudentsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    'pageable.page': pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await findAllStudents({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAllStudentsInfiniteQueryKey(options)
    });
};

export const createStudentQueryKey = (options: Options<CreateStudentData>) => createQueryKey('createStudent', options);

export const createStudentOptions = (options: Options<CreateStudentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createStudent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createStudentQueryKey(options)
    });
};

export const createStudentMutation = (options?: Partial<Options<CreateStudentData>>): UseMutationOptions<CreateStudentResponse, DefaultError, Options<CreateStudentData>> => {
    const mutationOptions: UseMutationOptions<CreateStudentResponse, DefaultError, Options<CreateStudentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createStudent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSessionQueryKey = (options: Options<GetSessionData>) => createQueryKey('getSession', options);

export const getSessionOptions = (options: Options<GetSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSessionQueryKey(options)
    });
};

export const updateSessionQueryKey = (options: Options<UpdateSessionData>) => createQueryKey('updateSession', options);

export const updateSessionOptions = (options: Options<UpdateSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await updateSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: updateSessionQueryKey(options)
    });
};

export const updateSessionMutation = (options?: Partial<Options<UpdateSessionData>>): UseMutationOptions<UpdateSessionResponse, DefaultError, Options<UpdateSessionData>> => {
    const mutationOptions: UseMutationOptions<UpdateSessionResponse, DefaultError, Options<UpdateSessionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateSession({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateSessionTrainerQueryKey = (options: Options<UpdateSessionTrainerData>) => createQueryKey('updateSessionTrainer', options);

export const updateSessionTrainerOptions = (options: Options<UpdateSessionTrainerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await updateSessionTrainer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: updateSessionTrainerQueryKey(options)
    });
};

export const updateSessionTrainerMutation = (options?: Partial<Options<UpdateSessionTrainerData>>): UseMutationOptions<UpdateSessionTrainerResponse, DefaultError, Options<UpdateSessionTrainerData>> => {
    const mutationOptions: UseMutationOptions<UpdateSessionTrainerResponse, DefaultError, Options<UpdateSessionTrainerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateSessionTrainer({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addSessionParticipantQueryKey = (options: Options<AddSessionParticipantData>) => createQueryKey('addSessionParticipant', options);

export const addSessionParticipantOptions = (options: Options<AddSessionParticipantData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addSessionParticipant({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addSessionParticipantQueryKey(options)
    });
};

export const addSessionParticipantMutation = (options?: Partial<Options<AddSessionParticipantData>>): UseMutationOptions<AddSessionParticipantResponse, DefaultError, Options<AddSessionParticipantData>> => {
    const mutationOptions: UseMutationOptions<AddSessionParticipantResponse, DefaultError, Options<AddSessionParticipantData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addSessionParticipant({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updatePresenceQueryKey = (options: Options<UpdatePresenceData>) => createQueryKey('updatePresence', options);

export const updatePresenceOptions = (options: Options<UpdatePresenceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await updatePresence({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: updatePresenceQueryKey(options)
    });
};

export const updatePresenceMutation = (options?: Partial<Options<UpdatePresenceData>>): UseMutationOptions<UpdatePresenceResponse, DefaultError, Options<UpdatePresenceData>> => {
    const mutationOptions: UseMutationOptions<UpdatePresenceResponse, DefaultError, Options<UpdatePresenceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updatePresence({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addRegisteredParticipantExerciseQueryKey = (options: Options<AddRegisteredParticipantExerciseData>) => createQueryKey('addRegisteredParticipantExercise', options);

export const addRegisteredParticipantExerciseOptions = (options: Options<AddRegisteredParticipantExerciseData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addRegisteredParticipantExercise({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addRegisteredParticipantExerciseQueryKey(options)
    });
};

export const addRegisteredParticipantExerciseMutation = (options?: Partial<Options<AddRegisteredParticipantExerciseData>>): UseMutationOptions<AddRegisteredParticipantExerciseResponse, DefaultError, Options<AddRegisteredParticipantExerciseData>> => {
    const mutationOptions: UseMutationOptions<AddRegisteredParticipantExerciseResponse, DefaultError, Options<AddRegisteredParticipantExerciseData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addRegisteredParticipantExercise({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const cancelOrRestoreSessionQueryKey = (options: Options<CancelOrRestoreSessionData>) => createQueryKey('cancelOrRestoreSession', options);

export const cancelOrRestoreSessionOptions = (options: Options<CancelOrRestoreSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await cancelOrRestoreSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: cancelOrRestoreSessionQueryKey(options)
    });
};

export const cancelOrRestoreSessionMutation = (options?: Partial<Options<CancelOrRestoreSessionData>>): UseMutationOptions<CancelOrRestoreSessionResponse, DefaultError, Options<CancelOrRestoreSessionData>> => {
    const mutationOptions: UseMutationOptions<CancelOrRestoreSessionResponse, DefaultError, Options<CancelOrRestoreSessionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await cancelOrRestoreSession({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createOneOffSessionQueryKey = (options: Options<CreateOneOffSessionData>) => createQueryKey('createOneOffSession', options);

export const createOneOffSessionOptions = (options: Options<CreateOneOffSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createOneOffSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createOneOffSessionQueryKey(options)
    });
};

export const createOneOffSessionMutation = (options?: Partial<Options<CreateOneOffSessionData>>): UseMutationOptions<CreateOneOffSessionResponse, DefaultError, Options<CreateOneOffSessionData>> => {
    const mutationOptions: UseMutationOptions<CreateOneOffSessionResponse, DefaultError, Options<CreateOneOffSessionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createOneOffSession({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllPlansQueryKey = (options?: Options<GetAllPlansData>) => createQueryKey('getAllPlans', options);

export const getAllPlansOptions = (options?: Options<GetAllPlansData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllPlans({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllPlansQueryKey(options)
    });
};

export const createPlanQueryKey = (options: Options<CreatePlanData>) => createQueryKey('createPlan', options);

export const createPlanOptions = (options: Options<CreatePlanData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createPlan({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createPlanQueryKey(options)
    });
};

export const createPlanMutation = (options?: Partial<Options<CreatePlanData>>): UseMutationOptions<CreatePlanResponse, DefaultError, Options<CreatePlanData>> => {
    const mutationOptions: UseMutationOptions<CreatePlanResponse, DefaultError, Options<CreatePlanData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createPlan({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assignPlanToStudentQueryKey = (options: Options<AssignPlanToStudentData>) => createQueryKey('assignPlanToStudent', options);

export const assignPlanToStudentOptions = (options: Options<AssignPlanToStudentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await assignPlanToStudent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assignPlanToStudentQueryKey(options)
    });
};

export const assignPlanToStudentMutation = (options?: Partial<Options<AssignPlanToStudentData>>): UseMutationOptions<AssignPlanToStudentResponse, DefaultError, Options<AssignPlanToStudentData>> => {
    const mutationOptions: UseMutationOptions<AssignPlanToStudentResponse, DefaultError, Options<AssignPlanToStudentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await assignPlanToStudent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findAllExercisesQueryKey = (options: Options<FindAllExercisesData>) => createQueryKey('findAllExercises', options);

export const findAllExercisesOptions = (options: Options<FindAllExercisesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findAllExercises({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAllExercisesQueryKey(options)
    });
};

export const findAllExercisesInfiniteQueryKey = (options: Options<FindAllExercisesData>): QueryKey<Options<FindAllExercisesData>> => createQueryKey('findAllExercises', options, true);

export const findAllExercisesInfiniteOptions = (options: Options<FindAllExercisesData>) => {
    return infiniteQueryOptions<FindAllExercisesResponse, DefaultError, InfiniteData<FindAllExercisesResponse>, QueryKey<Options<FindAllExercisesData>>, number | Pick<QueryKey<Options<FindAllExercisesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<FindAllExercisesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    'pageable.page': pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await findAllExercises({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAllExercisesInfiniteQueryKey(options)
    });
};

export const createExerciseQueryKey = (options: Options<CreateExerciseData>) => createQueryKey('createExercise', options);

export const createExerciseOptions = (options: Options<CreateExerciseData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createExercise({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createExerciseQueryKey(options)
    });
};

export const createExerciseMutation = (options?: Partial<Options<CreateExerciseData>>): UseMutationOptions<CreateExerciseResponse, DefaultError, Options<CreateExerciseData>> => {
    const mutationOptions: UseMutationOptions<CreateExerciseResponse, DefaultError, Options<CreateExerciseData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createExercise({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findAllEventsQueryKey = (options?: Options<FindAllEventsData>) => createQueryKey('findAllEvents', options);

export const findAllEventsOptions = (options?: Options<FindAllEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findAllEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAllEventsQueryKey(options)
    });
};

export const createEventQueryKey = (options: Options<CreateEventData>) => createQueryKey('createEvent', options);

export const createEventOptions = (options: Options<CreateEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createEventQueryKey(options)
    });
};

export const createEventMutation = (options?: Partial<Options<CreateEventData>>): UseMutationOptions<CreateEventResponse, DefaultError, Options<CreateEventData>> => {
    const mutationOptions: UseMutationOptions<CreateEventResponse, DefaultError, Options<CreateEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const removeParticipantMutation = (options?: Partial<Options<RemoveParticipantData>>): UseMutationOptions<unknown, DefaultError, Options<RemoveParticipantData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<RemoveParticipantData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeParticipant({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addParticipantQueryKey = (options: Options<AddParticipantData>) => createQueryKey('addParticipant', options);

export const addParticipantOptions = (options: Options<AddParticipantData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addParticipant({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addParticipantQueryKey(options)
    });
};

export const addParticipantMutation = (options?: Partial<Options<AddParticipantData>>): UseMutationOptions<AddParticipantResponse, DefaultError, Options<AddParticipantData>> => {
    const mutationOptions: UseMutationOptions<AddParticipantResponse, DefaultError, Options<AddParticipantData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addParticipant({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateCommitmentQueryKey = (options: Options<UpdateCommitmentData>) => createQueryKey('updateCommitment', options);

export const updateCommitmentOptions = (options: Options<UpdateCommitmentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await updateCommitment({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: updateCommitmentQueryKey(options)
    });
};

export const updateCommitmentMutation = (options?: Partial<Options<UpdateCommitmentData>>): UseMutationOptions<UpdateCommitmentResponse, DefaultError, Options<UpdateCommitmentData>> => {
    const mutationOptions: UseMutationOptions<UpdateCommitmentResponse, DefaultError, Options<UpdateCommitmentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateCommitment({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const bulkUpdateCommitmentsQueryKey = (options: Options<BulkUpdateCommitmentsData>) => createQueryKey('bulkUpdateCommitments', options);

export const bulkUpdateCommitmentsOptions = (options: Options<BulkUpdateCommitmentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await bulkUpdateCommitments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: bulkUpdateCommitmentsQueryKey(options)
    });
};

export const bulkUpdateCommitmentsMutation = (options?: Partial<Options<BulkUpdateCommitmentsData>>): UseMutationOptions<BulkUpdateCommitmentsResponse, DefaultError, Options<BulkUpdateCommitmentsData>> => {
    const mutationOptions: UseMutationOptions<BulkUpdateCommitmentsResponse, DefaultError, Options<BulkUpdateCommitmentsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await bulkUpdateCommitments({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const logoutQueryKey = (options?: Options<LogoutData>) => createQueryKey('logout', options);

export const logoutOptions = (options?: Options<LogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await logout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: logoutQueryKey(options)
    });
};

export const logoutMutation = (options?: Partial<Options<LogoutData>>): UseMutationOptions<LogoutResponse, DefaultError, Options<LogoutData>> => {
    const mutationOptions: UseMutationOptions<LogoutResponse, DefaultError, Options<LogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await logout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginQueryKey = (options: Options<LoginData>) => createQueryKey('login', options);

export const loginOptions = (options: Options<LoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await login({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginQueryKey(options)
    });
};

export const loginMutation = (options?: Partial<Options<LoginData>>): UseMutationOptions<LoginResponse, DefaultError, Options<LoginData>> => {
    const mutationOptions: UseMutationOptions<LoginResponse, DefaultError, Options<LoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await login({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findAllAdministratorsQueryKey = (options: Options<FindAllAdministratorsData>) => createQueryKey('findAllAdministrators', options);

export const findAllAdministratorsOptions = (options: Options<FindAllAdministratorsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findAllAdministrators({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAllAdministratorsQueryKey(options)
    });
};

export const findAllAdministratorsInfiniteQueryKey = (options: Options<FindAllAdministratorsData>): QueryKey<Options<FindAllAdministratorsData>> => createQueryKey('findAllAdministrators', options, true);

export const findAllAdministratorsInfiniteOptions = (options: Options<FindAllAdministratorsData>) => {
    return infiniteQueryOptions<FindAllAdministratorsResponse, DefaultError, InfiniteData<FindAllAdministratorsResponse>, QueryKey<Options<FindAllAdministratorsData>>, number | Pick<QueryKey<Options<FindAllAdministratorsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<FindAllAdministratorsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    'pageable.page': pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await findAllAdministrators({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAllAdministratorsInfiniteQueryKey(options)
    });
};

export const createAdministratorQueryKey = (options: Options<CreateAdministratorData>) => createQueryKey('createAdministrator', options);

export const createAdministratorOptions = (options: Options<CreateAdministratorData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createAdministrator({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createAdministratorQueryKey(options)
    });
};

export const createAdministratorMutation = (options?: Partial<Options<CreateAdministratorData>>): UseMutationOptions<CreateAdministratorResponse, DefaultError, Options<CreateAdministratorData>> => {
    const mutationOptions: UseMutationOptions<CreateAdministratorResponse, DefaultError, Options<CreateAdministratorData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createAdministrator({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const patchMutation = (options?: Partial<Options<PatchData>>): UseMutationOptions<PatchResponse, DefaultError, Options<PatchData>> => {
    const mutationOptions: UseMutationOptions<PatchResponse, DefaultError, Options<PatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const restoreStudentMutation = (options?: Partial<Options<RestoreStudentData>>): UseMutationOptions<RestoreStudentResponse, DefaultError, Options<RestoreStudentData>> => {
    const mutationOptions: UseMutationOptions<RestoreStudentResponse, DefaultError, Options<RestoreStudentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await restoreStudent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const removeRegisteredParticipantExerciseMutation = (options?: Partial<Options<RemoveRegisteredParticipantExerciseData>>): UseMutationOptions<RemoveRegisteredParticipantExerciseResponse, DefaultError, Options<RemoveRegisteredParticipantExerciseData>> => {
    const mutationOptions: UseMutationOptions<RemoveRegisteredParticipantExerciseResponse, DefaultError, Options<RemoveRegisteredParticipantExerciseData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeRegisteredParticipantExercise({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateRegisteredParticipantExerciseMutation = (options?: Partial<Options<UpdateRegisteredParticipantExerciseData>>): UseMutationOptions<UpdateRegisteredParticipantExerciseResponse, DefaultError, Options<UpdateRegisteredParticipantExerciseData>> => {
    const mutationOptions: UseMutationOptions<UpdateRegisteredParticipantExerciseResponse, DefaultError, Options<UpdateRegisteredParticipantExerciseData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateRegisteredParticipantExercise({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const restoreExerciseMutation = (options?: Partial<Options<RestoreExerciseData>>): UseMutationOptions<RestoreExerciseResponse, DefaultError, Options<RestoreExerciseData>> => {
    const mutationOptions: UseMutationOptions<RestoreExerciseResponse, DefaultError, Options<RestoreExerciseData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await restoreExercise({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const restoreEventMutation = (options?: Partial<Options<RestoreEventData>>): UseMutationOptions<RestoreEventResponse, DefaultError, Options<RestoreEventData>> => {
    const mutationOptions: UseMutationOptions<RestoreEventResponse, DefaultError, Options<RestoreEventData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await restoreEvent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const toggleAttendanceMutation = (options?: Partial<Options<ToggleAttendanceData>>): UseMutationOptions<ToggleAttendanceResponse, DefaultError, Options<ToggleAttendanceData>> => {
    const mutationOptions: UseMutationOptions<ToggleAttendanceResponse, DefaultError, Options<ToggleAttendanceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await toggleAttendance({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const restoreAdministratorMutation = (options?: Partial<Options<RestoreAdministratorData>>): UseMutationOptions<RestoreAdministratorResponse, DefaultError, Options<RestoreAdministratorData>> => {
    const mutationOptions: UseMutationOptions<RestoreAdministratorResponse, DefaultError, Options<RestoreAdministratorData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await restoreAdministrator({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findTrainerByUserIdQueryKey = (options: Options<FindTrainerByUserIdData>) => createQueryKey('findTrainerByUserId', options);

export const findTrainerByUserIdOptions = (options: Options<FindTrainerByUserIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findTrainerByUserId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findTrainerByUserIdQueryKey(options)
    });
};

export const getSchedulesByTrainerQueryKey = (options: Options<GetSchedulesByTrainerData>) => createQueryKey('getSchedulesByTrainer', options);

export const getSchedulesByTrainerOptions = (options: Options<GetSchedulesByTrainerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSchedulesByTrainer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSchedulesByTrainerQueryKey(options)
    });
};

export const getScheduleQueryKey = (options: Options<GetScheduleData>) => createQueryKey('getSchedule', options);

export const getScheduleOptions = (options: Options<GetScheduleData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSchedule({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getScheduleQueryKey(options)
    });
};

export const deletePlanMutation = (options?: Partial<Options<DeletePlanData>>): UseMutationOptions<unknown, DefaultError, Options<DeletePlanData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeletePlanData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deletePlan({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPlanByIdQueryKey = (options: Options<GetPlanByIdData>) => createQueryKey('getPlanById', options);

export const getPlanByIdOptions = (options: Options<GetPlanByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPlanById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPlanByIdQueryKey(options)
    });
};

export const getStudentPlanHistoryQueryKey = (options: Options<GetStudentPlanHistoryData>) => createQueryKey('getStudentPlanHistory', options);

export const getStudentPlanHistoryOptions = (options: Options<GetStudentPlanHistoryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStudentPlanHistory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStudentPlanHistoryQueryKey(options)
    });
};

export const getCurrentStudentPlanQueryKey = (options: Options<GetCurrentStudentPlanData>) => createQueryKey('getCurrentStudentPlan', options);

export const getCurrentStudentPlanOptions = (options: Options<GetCurrentStudentPlanData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCurrentStudentPlan({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCurrentStudentPlanQueryKey(options)
    });
};

export const getExpiringSoonAssignmentsQueryKey = (options?: Options<GetExpiringSoonAssignmentsData>) => createQueryKey('getExpiringSoonAssignments', options);

export const getExpiringSoonAssignmentsOptions = (options?: Options<GetExpiringSoonAssignmentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getExpiringSoonAssignments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getExpiringSoonAssignmentsQueryKey(options)
    });
};

export const getAllActiveAssignmentsQueryKey = (options?: Options<GetAllActiveAssignmentsData>) => createQueryKey('getAllActiveAssignments', options);

export const getAllActiveAssignmentsOptions = (options?: Options<GetAllActiveAssignmentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllActiveAssignments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllActiveAssignmentsQueryKey(options)
    });
};

export const getTrainersForLookupQueryKey = (options?: Options<GetTrainersForLookupData>) => createQueryKey('getTrainersForLookup', options);

export const getTrainersForLookupOptions = (options?: Options<GetTrainersForLookupData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTrainersForLookup({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTrainersForLookupQueryKey(options)
    });
};

export const getStudentsForLookupQueryKey = (options?: Options<GetStudentsForLookupData>) => createQueryKey('getStudentsForLookup', options);

export const getStudentsForLookupOptions = (options?: Options<GetStudentsForLookupData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStudentsForLookup({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStudentsForLookupQueryKey(options)
    });
};

export const getStudentCommitmentsQueryKey = (options: Options<GetStudentCommitmentsData>) => createQueryKey('getStudentCommitments', options);

export const getStudentCommitmentsOptions = (options: Options<GetStudentCommitmentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStudentCommitments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStudentCommitmentsQueryKey(options)
    });
};

export const getCurrentCommitmentStatusQueryKey = (options: Options<GetCurrentCommitmentStatusData>) => createQueryKey('getCurrentCommitmentStatus', options);

export const getCurrentCommitmentStatusOptions = (options: Options<GetCurrentCommitmentStatusData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCurrentCommitmentStatus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCurrentCommitmentStatusQueryKey(options)
    });
};

export const getCommitmentHistoryQueryKey = (options: Options<GetCommitmentHistoryData>) => createQueryKey('getCommitmentHistory', options);

export const getCommitmentHistoryOptions = (options: Options<GetCommitmentHistoryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCommitmentHistory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCommitmentHistoryQueryKey(options)
    });
};

export const getCurrentActiveCommitmentsQueryKey = (options: Options<GetCurrentActiveCommitmentsData>) => createQueryKey('getCurrentActiveCommitments', options);

export const getCurrentActiveCommitmentsOptions = (options: Options<GetCurrentActiveCommitmentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCurrentActiveCommitments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCurrentActiveCommitmentsQueryKey(options)
    });
};

export const getSessionSeriesCommitmentsQueryKey = (options: Options<GetSessionSeriesCommitmentsData>) => createQueryKey('getSessionSeriesCommitments', options);

export const getSessionSeriesCommitmentsOptions = (options: Options<GetSessionSeriesCommitmentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSessionSeriesCommitments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSessionSeriesCommitmentsQueryKey(options)
    });
};

export const getAvailableSessionSeriesQueryKey = (options?: Options<GetAvailableSessionSeriesData>) => createQueryKey('getAvailableSessionSeries', options);

export const getAvailableSessionSeriesOptions = (options?: Options<GetAvailableSessionSeriesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAvailableSessionSeries({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAvailableSessionSeriesQueryKey(options)
    });
};

export const removeSessionParticipantMutation = (options?: Partial<Options<RemoveSessionParticipantData>>): UseMutationOptions<RemoveSessionParticipantResponse, DefaultError, Options<RemoveSessionParticipantData>> => {
    const mutationOptions: UseMutationOptions<RemoveSessionParticipantResponse, DefaultError, Options<RemoveSessionParticipantData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeSessionParticipant({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};