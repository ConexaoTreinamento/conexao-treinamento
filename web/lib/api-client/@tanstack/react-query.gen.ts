// This file is auto-generated by @hey-api/openapi-ts

import { type Options, softDeleteTrainerUser, findTrainerById, updateTrainerAndUser, delete_, findById, update, delete1, findById1, patch, update1, updateSchedule, restorePlan, delete2, findById2, patch1, update2, getAllUsersSimple, createUser, findAllTrainers, createTrainerAndUser, findAll, create, findAll1, create1, logout, login, updateSession, getSeries, createSeries, createOneOffSession, enrollStudent, getAllPlans, createPlan, assignPlanToStudent, splitCommitment, createCommitment, findAll2, create2, patch2, restore, restore1, restore2, getSchedule, deletePlan, getPlanById, getStudentPlanHistory, getCurrentStudentPlan, getExpiringSoonAssignments, getAllActiveAssignments, getCommitmentsAt } from '../sdk.gen';
import { type UseMutationOptions, type DefaultError, queryOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { SoftDeleteTrainerUserData, FindTrainerByIdData, UpdateTrainerAndUserData, UpdateTrainerAndUserResponse, DeleteData, FindByIdData, UpdateData, UpdateResponse, Delete1Data, FindById1Data, PatchData, PatchResponse, Update1Data, Update1Response, UpdateScheduleData, UpdateScheduleResponse, RestorePlanData, Delete2Data, FindById2Data, Patch1Data, Patch1Response, Update2Data, Update2Response, GetAllUsersSimpleData, GetAllUsersSimpleResponse, CreateUserData, CreateUserResponse, FindAllTrainersData, CreateTrainerAndUserData, CreateTrainerAndUserResponse, FindAllData, FindAllResponse, CreateData, CreateResponse, FindAll1Data, FindAll1Response, Create1Data, Create1Response, LogoutData, LogoutResponse, LoginData, LoginResponse, UpdateSessionData, UpdateSessionResponse, GetSeriesData, CreateSeriesData, CreateSeriesResponse, CreateOneOffSessionData, CreateOneOffSessionResponse, EnrollStudentData, EnrollStudentResponse, GetAllPlansData, CreatePlanData, CreatePlanResponse, AssignPlanToStudentData, AssignPlanToStudentResponse, SplitCommitmentData, SplitCommitmentResponse, CreateCommitmentData, CreateCommitmentResponse, FindAll2Data, FindAll2Response, Create2Data, Create2Response, Patch2Data, Patch2Response, RestoreData, RestoreResponse, Restore1Data, Restore1Response, Restore2Data, Restore2Response, GetScheduleData, DeletePlanData, GetPlanByIdData, GetStudentPlanHistoryData, GetCurrentStudentPlanData, GetExpiringSoonAssignmentsData, GetAllActiveAssignmentsData, GetCommitmentsAtData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export const softDeleteTrainerUserMutation = (options?: Partial<Options<SoftDeleteTrainerUserData>>): UseMutationOptions<unknown, DefaultError, Options<SoftDeleteTrainerUserData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<SoftDeleteTrainerUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await softDeleteTrainerUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const findTrainerByIdQueryKey = (options: Options<FindTrainerByIdData>) => createQueryKey('findTrainerById', options);

export const findTrainerByIdOptions = (options: Options<FindTrainerByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findTrainerById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findTrainerByIdQueryKey(options)
    });
};

export const updateTrainerAndUserMutation = (options?: Partial<Options<UpdateTrainerAndUserData>>): UseMutationOptions<UpdateTrainerAndUserResponse, DefaultError, Options<UpdateTrainerAndUserData>> => {
    const mutationOptions: UseMutationOptions<UpdateTrainerAndUserResponse, DefaultError, Options<UpdateTrainerAndUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateTrainerAndUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteMutation = (options?: Partial<Options<DeleteData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await delete_({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findByIdQueryKey = (options: Options<FindByIdData>) => createQueryKey('findById', options);

export const findByIdOptions = (options: Options<FindByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findByIdQueryKey(options)
    });
};

export const updateMutation = (options?: Partial<Options<UpdateData>>): UseMutationOptions<UpdateResponse, DefaultError, Options<UpdateData>> => {
    const mutationOptions: UseMutationOptions<UpdateResponse, DefaultError, Options<UpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await update({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const delete1Mutation = (options?: Partial<Options<Delete1Data>>): UseMutationOptions<unknown, DefaultError, Options<Delete1Data>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<Delete1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await delete1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findById1QueryKey = (options: Options<FindById1Data>) => createQueryKey('findById1', options);

export const findById1Options = (options: Options<FindById1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findById1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findById1QueryKey(options)
    });
};

export const patchMutation = (options?: Partial<Options<PatchData>>): UseMutationOptions<PatchResponse, DefaultError, Options<PatchData>> => {
    const mutationOptions: UseMutationOptions<PatchResponse, DefaultError, Options<PatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const update1Mutation = (options?: Partial<Options<Update1Data>>): UseMutationOptions<Update1Response, DefaultError, Options<Update1Data>> => {
    const mutationOptions: UseMutationOptions<Update1Response, DefaultError, Options<Update1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await update1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateScheduleMutation = (options?: Partial<Options<UpdateScheduleData>>): UseMutationOptions<UpdateScheduleResponse, DefaultError, Options<UpdateScheduleData>> => {
    const mutationOptions: UseMutationOptions<UpdateScheduleResponse, DefaultError, Options<UpdateScheduleData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateSchedule({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const restorePlanMutation = (options?: Partial<Options<RestorePlanData>>): UseMutationOptions<unknown, DefaultError, Options<RestorePlanData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<RestorePlanData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await restorePlan({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const delete2Mutation = (options?: Partial<Options<Delete2Data>>): UseMutationOptions<unknown, DefaultError, Options<Delete2Data>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<Delete2Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await delete2({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findById2QueryKey = (options: Options<FindById2Data>) => createQueryKey('findById2', options);

export const findById2Options = (options: Options<FindById2Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findById2({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findById2QueryKey(options)
    });
};

export const patch1Mutation = (options?: Partial<Options<Patch1Data>>): UseMutationOptions<Patch1Response, DefaultError, Options<Patch1Data>> => {
    const mutationOptions: UseMutationOptions<Patch1Response, DefaultError, Options<Patch1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patch1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const update2Mutation = (options?: Partial<Options<Update2Data>>): UseMutationOptions<Update2Response, DefaultError, Options<Update2Data>> => {
    const mutationOptions: UseMutationOptions<Update2Response, DefaultError, Options<Update2Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await update2({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllUsersSimpleQueryKey = (options: Options<GetAllUsersSimpleData>) => createQueryKey('getAllUsersSimple', options);

export const getAllUsersSimpleOptions = (options: Options<GetAllUsersSimpleData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllUsersSimple({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllUsersSimpleQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getAllUsersSimpleInfiniteQueryKey = (options: Options<GetAllUsersSimpleData>): QueryKey<Options<GetAllUsersSimpleData>> => createQueryKey('getAllUsersSimple', options, true);

export const getAllUsersSimpleInfiniteOptions = (options: Options<GetAllUsersSimpleData>) => {
    return infiniteQueryOptions<GetAllUsersSimpleResponse, DefaultError, InfiniteData<GetAllUsersSimpleResponse>, QueryKey<Options<GetAllUsersSimpleData>>, number | Pick<QueryKey<Options<GetAllUsersSimpleData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetAllUsersSimpleData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    'pageable.page': pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAllUsersSimple({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllUsersSimpleInfiniteQueryKey(options)
    });
};

export const createUserQueryKey = (options: Options<CreateUserData>) => createQueryKey('createUser', options);

export const createUserOptions = (options: Options<CreateUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createUserQueryKey(options)
    });
};

export const createUserMutation = (options?: Partial<Options<CreateUserData>>): UseMutationOptions<CreateUserResponse, DefaultError, Options<CreateUserData>> => {
    const mutationOptions: UseMutationOptions<CreateUserResponse, DefaultError, Options<CreateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findAllTrainersQueryKey = (options?: Options<FindAllTrainersData>) => createQueryKey('findAllTrainers', options);

export const findAllTrainersOptions = (options?: Options<FindAllTrainersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findAllTrainers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAllTrainersQueryKey(options)
    });
};

export const createTrainerAndUserQueryKey = (options: Options<CreateTrainerAndUserData>) => createQueryKey('createTrainerAndUser', options);

export const createTrainerAndUserOptions = (options: Options<CreateTrainerAndUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createTrainerAndUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createTrainerAndUserQueryKey(options)
    });
};

export const createTrainerAndUserMutation = (options?: Partial<Options<CreateTrainerAndUserData>>): UseMutationOptions<CreateTrainerAndUserResponse, DefaultError, Options<CreateTrainerAndUserData>> => {
    const mutationOptions: UseMutationOptions<CreateTrainerAndUserResponse, DefaultError, Options<CreateTrainerAndUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTrainerAndUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findAllQueryKey = (options: Options<FindAllData>) => createQueryKey('findAll', options);

export const findAllOptions = (options: Options<FindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAllQueryKey(options)
    });
};

export const findAllInfiniteQueryKey = (options: Options<FindAllData>): QueryKey<Options<FindAllData>> => createQueryKey('findAll', options, true);

export const findAllInfiniteOptions = (options: Options<FindAllData>) => {
    return infiniteQueryOptions<FindAllResponse, DefaultError, InfiniteData<FindAllResponse>, QueryKey<Options<FindAllData>>, number | Pick<QueryKey<Options<FindAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<FindAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    'pageable.page': pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await findAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAllInfiniteQueryKey(options)
    });
};

export const createQueryKey2 = (options: Options<CreateData>) => createQueryKey('create', options);

export const createOptions = (options: Options<CreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await create({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createQueryKey2(options)
    });
};

export const createMutation = (options?: Partial<Options<CreateData>>): UseMutationOptions<CreateResponse, DefaultError, Options<CreateData>> => {
    const mutationOptions: UseMutationOptions<CreateResponse, DefaultError, Options<CreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await create({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findAll1QueryKey = (options: Options<FindAll1Data>) => createQueryKey('findAll1', options);

export const findAll1Options = (options: Options<FindAll1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findAll1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAll1QueryKey(options)
    });
};

export const findAll1InfiniteQueryKey = (options: Options<FindAll1Data>): QueryKey<Options<FindAll1Data>> => createQueryKey('findAll1', options, true);

export const findAll1InfiniteOptions = (options: Options<FindAll1Data>) => {
    return infiniteQueryOptions<FindAll1Response, DefaultError, InfiniteData<FindAll1Response>, QueryKey<Options<FindAll1Data>>, number | Pick<QueryKey<Options<FindAll1Data>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<FindAll1Data>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    'pageable.page': pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await findAll1({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAll1InfiniteQueryKey(options)
    });
};

export const create1QueryKey = (options: Options<Create1Data>) => createQueryKey('create1', options);

export const create1Options = (options: Options<Create1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await create1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: create1QueryKey(options)
    });
};

export const create1Mutation = (options?: Partial<Options<Create1Data>>): UseMutationOptions<Create1Response, DefaultError, Options<Create1Data>> => {
    const mutationOptions: UseMutationOptions<Create1Response, DefaultError, Options<Create1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await create1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const logoutQueryKey = (options?: Options<LogoutData>) => createQueryKey('logout', options);

export const logoutOptions = (options?: Options<LogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await logout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: logoutQueryKey(options)
    });
};

export const logoutMutation = (options?: Partial<Options<LogoutData>>): UseMutationOptions<LogoutResponse, DefaultError, Options<LogoutData>> => {
    const mutationOptions: UseMutationOptions<LogoutResponse, DefaultError, Options<LogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await logout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginQueryKey = (options: Options<LoginData>) => createQueryKey('login', options);

export const loginOptions = (options: Options<LoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await login({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginQueryKey(options)
    });
};

export const loginMutation = (options?: Partial<Options<LoginData>>): UseMutationOptions<LoginResponse, DefaultError, Options<LoginData>> => {
    const mutationOptions: UseMutationOptions<LoginResponse, DefaultError, Options<LoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await login({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateSessionQueryKey = (options: Options<UpdateSessionData>) => createQueryKey('updateSession', options);

export const updateSessionOptions = (options: Options<UpdateSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await updateSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: updateSessionQueryKey(options)
    });
};

export const updateSessionMutation = (options?: Partial<Options<UpdateSessionData>>): UseMutationOptions<UpdateSessionResponse, DefaultError, Options<UpdateSessionData>> => {
    const mutationOptions: UseMutationOptions<UpdateSessionResponse, DefaultError, Options<UpdateSessionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateSession({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSeriesQueryKey = (options?: Options<GetSeriesData>) => createQueryKey('getSeries', options);

export const getSeriesOptions = (options?: Options<GetSeriesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSeries({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSeriesQueryKey(options)
    });
};

export const createSeriesQueryKey = (options: Options<CreateSeriesData>) => createQueryKey('createSeries', options);

export const createSeriesOptions = (options: Options<CreateSeriesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createSeries({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createSeriesQueryKey(options)
    });
};

export const createSeriesMutation = (options?: Partial<Options<CreateSeriesData>>): UseMutationOptions<CreateSeriesResponse, DefaultError, Options<CreateSeriesData>> => {
    const mutationOptions: UseMutationOptions<CreateSeriesResponse, DefaultError, Options<CreateSeriesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createSeries({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createOneOffSessionQueryKey = (options: Options<CreateOneOffSessionData>) => createQueryKey('createOneOffSession', options);

export const createOneOffSessionOptions = (options: Options<CreateOneOffSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createOneOffSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createOneOffSessionQueryKey(options)
    });
};

export const createOneOffSessionMutation = (options?: Partial<Options<CreateOneOffSessionData>>): UseMutationOptions<CreateOneOffSessionResponse, DefaultError, Options<CreateOneOffSessionData>> => {
    const mutationOptions: UseMutationOptions<CreateOneOffSessionResponse, DefaultError, Options<CreateOneOffSessionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createOneOffSession({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const enrollStudentQueryKey = (options: Options<EnrollStudentData>) => createQueryKey('enrollStudent', options);

export const enrollStudentOptions = (options: Options<EnrollStudentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await enrollStudent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: enrollStudentQueryKey(options)
    });
};

export const enrollStudentMutation = (options?: Partial<Options<EnrollStudentData>>): UseMutationOptions<EnrollStudentResponse, DefaultError, Options<EnrollStudentData>> => {
    const mutationOptions: UseMutationOptions<EnrollStudentResponse, DefaultError, Options<EnrollStudentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await enrollStudent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllPlansQueryKey = (options?: Options<GetAllPlansData>) => createQueryKey('getAllPlans', options);

export const getAllPlansOptions = (options?: Options<GetAllPlansData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllPlans({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllPlansQueryKey(options)
    });
};

export const createPlanQueryKey = (options: Options<CreatePlanData>) => createQueryKey('createPlan', options);

export const createPlanOptions = (options: Options<CreatePlanData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createPlan({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createPlanQueryKey(options)
    });
};

export const createPlanMutation = (options?: Partial<Options<CreatePlanData>>): UseMutationOptions<CreatePlanResponse, DefaultError, Options<CreatePlanData>> => {
    const mutationOptions: UseMutationOptions<CreatePlanResponse, DefaultError, Options<CreatePlanData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createPlan({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assignPlanToStudentQueryKey = (options: Options<AssignPlanToStudentData>) => createQueryKey('assignPlanToStudent', options);

export const assignPlanToStudentOptions = (options: Options<AssignPlanToStudentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await assignPlanToStudent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assignPlanToStudentQueryKey(options)
    });
};

export const assignPlanToStudentMutation = (options?: Partial<Options<AssignPlanToStudentData>>): UseMutationOptions<AssignPlanToStudentResponse, DefaultError, Options<AssignPlanToStudentData>> => {
    const mutationOptions: UseMutationOptions<AssignPlanToStudentResponse, DefaultError, Options<AssignPlanToStudentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await assignPlanToStudent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const splitCommitmentQueryKey = (options: Options<SplitCommitmentData>) => createQueryKey('splitCommitment', options);

export const splitCommitmentOptions = (options: Options<SplitCommitmentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await splitCommitment({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: splitCommitmentQueryKey(options)
    });
};

export const splitCommitmentMutation = (options?: Partial<Options<SplitCommitmentData>>): UseMutationOptions<SplitCommitmentResponse, DefaultError, Options<SplitCommitmentData>> => {
    const mutationOptions: UseMutationOptions<SplitCommitmentResponse, DefaultError, Options<SplitCommitmentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await splitCommitment({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createCommitmentQueryKey = (options: Options<CreateCommitmentData>) => createQueryKey('createCommitment', options);

export const createCommitmentOptions = (options: Options<CreateCommitmentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createCommitment({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createCommitmentQueryKey(options)
    });
};

export const createCommitmentMutation = (options?: Partial<Options<CreateCommitmentData>>): UseMutationOptions<CreateCommitmentResponse, DefaultError, Options<CreateCommitmentData>> => {
    const mutationOptions: UseMutationOptions<CreateCommitmentResponse, DefaultError, Options<CreateCommitmentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createCommitment({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findAll2QueryKey = (options: Options<FindAll2Data>) => createQueryKey('findAll2', options);

export const findAll2Options = (options: Options<FindAll2Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findAll2({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAll2QueryKey(options)
    });
};

export const findAll2InfiniteQueryKey = (options: Options<FindAll2Data>): QueryKey<Options<FindAll2Data>> => createQueryKey('findAll2', options, true);

export const findAll2InfiniteOptions = (options: Options<FindAll2Data>) => {
    return infiniteQueryOptions<FindAll2Response, DefaultError, InfiniteData<FindAll2Response>, QueryKey<Options<FindAll2Data>>, number | Pick<QueryKey<Options<FindAll2Data>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<FindAll2Data>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    'pageable.page': pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await findAll2({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findAll2InfiniteQueryKey(options)
    });
};

export const create2QueryKey = (options: Options<Create2Data>) => createQueryKey('create2', options);

export const create2Options = (options: Options<Create2Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await create2({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: create2QueryKey(options)
    });
};

export const create2Mutation = (options?: Partial<Options<Create2Data>>): UseMutationOptions<Create2Response, DefaultError, Options<Create2Data>> => {
    const mutationOptions: UseMutationOptions<Create2Response, DefaultError, Options<Create2Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await create2({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const patch2Mutation = (options?: Partial<Options<Patch2Data>>): UseMutationOptions<Patch2Response, DefaultError, Options<Patch2Data>> => {
    const mutationOptions: UseMutationOptions<Patch2Response, DefaultError, Options<Patch2Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patch2({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const restoreMutation = (options?: Partial<Options<RestoreData>>): UseMutationOptions<RestoreResponse, DefaultError, Options<RestoreData>> => {
    const mutationOptions: UseMutationOptions<RestoreResponse, DefaultError, Options<RestoreData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await restore({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const restore1Mutation = (options?: Partial<Options<Restore1Data>>): UseMutationOptions<Restore1Response, DefaultError, Options<Restore1Data>> => {
    const mutationOptions: UseMutationOptions<Restore1Response, DefaultError, Options<Restore1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await restore1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const restore2Mutation = (options?: Partial<Options<Restore2Data>>): UseMutationOptions<Restore2Response, DefaultError, Options<Restore2Data>> => {
    const mutationOptions: UseMutationOptions<Restore2Response, DefaultError, Options<Restore2Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await restore2({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getScheduleQueryKey = (options: Options<GetScheduleData>) => createQueryKey('getSchedule', options);

export const getScheduleOptions = (options: Options<GetScheduleData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSchedule({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getScheduleQueryKey(options)
    });
};

export const deletePlanMutation = (options?: Partial<Options<DeletePlanData>>): UseMutationOptions<unknown, DefaultError, Options<DeletePlanData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeletePlanData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deletePlan({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPlanByIdQueryKey = (options: Options<GetPlanByIdData>) => createQueryKey('getPlanById', options);

export const getPlanByIdOptions = (options: Options<GetPlanByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPlanById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPlanByIdQueryKey(options)
    });
};

export const getStudentPlanHistoryQueryKey = (options: Options<GetStudentPlanHistoryData>) => createQueryKey('getStudentPlanHistory', options);

export const getStudentPlanHistoryOptions = (options: Options<GetStudentPlanHistoryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStudentPlanHistory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStudentPlanHistoryQueryKey(options)
    });
};

export const getCurrentStudentPlanQueryKey = (options: Options<GetCurrentStudentPlanData>) => createQueryKey('getCurrentStudentPlan', options);

export const getCurrentStudentPlanOptions = (options: Options<GetCurrentStudentPlanData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCurrentStudentPlan({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCurrentStudentPlanQueryKey(options)
    });
};

export const getExpiringSoonAssignmentsQueryKey = (options?: Options<GetExpiringSoonAssignmentsData>) => createQueryKey('getExpiringSoonAssignments', options);

export const getExpiringSoonAssignmentsOptions = (options?: Options<GetExpiringSoonAssignmentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getExpiringSoonAssignments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getExpiringSoonAssignmentsQueryKey(options)
    });
};

export const getAllActiveAssignmentsQueryKey = (options?: Options<GetAllActiveAssignmentsData>) => createQueryKey('getAllActiveAssignments', options);

export const getAllActiveAssignmentsOptions = (options?: Options<GetAllActiveAssignmentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllActiveAssignments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllActiveAssignmentsQueryKey(options)
    });
};

export const getCommitmentsAtQueryKey = (options: Options<GetCommitmentsAtData>) => createQueryKey('getCommitmentsAt', options);

export const getCommitmentsAtOptions = (options: Options<GetCommitmentsAtData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCommitmentsAt({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCommitmentsAtQueryKey(options)
    });
};