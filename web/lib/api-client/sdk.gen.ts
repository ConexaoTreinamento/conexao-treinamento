// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { DeleteData, DeleteResponses, FindByIdData, FindByIdResponses, UpdateData, UpdateResponses, Delete1Data, Delete1Responses, FindById1Data, FindById1Responses, PatchData, PatchResponses, Update1Data, Update1Responses, FindAllData, FindAllResponses, CreateData, CreateResponses, FindAll1Data, FindAll1Responses, Create1Data, Create1Responses, RestoreData, RestoreResponses, Restore1Data, Restore1Responses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const delete_ = <ThrowOnError extends boolean = false>(options: Options<DeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteResponses, unknown, ThrowOnError>({
        url: '/students/{id}',
        ...options
    });
};

export const findById = <ThrowOnError extends boolean = false>(options: Options<FindByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindByIdResponses, unknown, ThrowOnError>({
        url: '/students/{id}',
        ...options
    });
};

export const update = <ThrowOnError extends boolean = false>(options: Options<UpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateResponses, unknown, ThrowOnError>({
        url: '/students/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const delete1 = <ThrowOnError extends boolean = false>(options: Options<Delete1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<Delete1Responses, unknown, ThrowOnError>({
        url: '/exercises/{id}',
        ...options
    });
};

export const findById1 = <ThrowOnError extends boolean = false>(options: Options<FindById1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindById1Responses, unknown, ThrowOnError>({
        url: '/exercises/{id}',
        ...options
    });
};

export const patch = <ThrowOnError extends boolean = false>(options: Options<PatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchResponses, unknown, ThrowOnError>({
        url: '/exercises/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const update1 = <ThrowOnError extends boolean = false>(options: Options<Update1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<Update1Responses, unknown, ThrowOnError>({
        url: '/exercises/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAll = <ThrowOnError extends boolean = false>(options: Options<FindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAllResponses, unknown, ThrowOnError>({
        url: '/students',
        ...options
    });
};

export const create = <ThrowOnError extends boolean = false>(options: Options<CreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateResponses, unknown, ThrowOnError>({
        url: '/students',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAll1 = <ThrowOnError extends boolean = false>(options: Options<FindAll1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAll1Responses, unknown, ThrowOnError>({
        url: '/exercises',
        ...options
    });
};

export const create1 = <ThrowOnError extends boolean = false>(options: Options<Create1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<Create1Responses, unknown, ThrowOnError>({
        url: '/exercises',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const restore = <ThrowOnError extends boolean = false>(options: Options<RestoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RestoreResponses, unknown, ThrowOnError>({
        url: '/students/{id}/restore',
        ...options
    });
};

export const restore1 = <ThrowOnError extends boolean = false>(options: Options<Restore1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<Restore1Responses, unknown, ThrowOnError>({
        url: '/exercises/{id}/restore',
        ...options
    });
};