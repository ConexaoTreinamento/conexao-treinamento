// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { SoftDeleteTrainerUserData, SoftDeleteTrainerUserResponses, FindTrainerByIdData, FindTrainerByIdResponses, UpdateTrainerAndUserData, UpdateTrainerAndUserResponses, DeleteData, DeleteResponses, FindByIdData, FindByIdResponses, UpdateData, UpdateResponses, Delete1Data, Delete1Responses, FindById1Data, FindById1Responses, PatchData, PatchResponses, Update1Data, Update1Responses, DeleteEventData, DeleteEventResponses, FindEventByIdData, FindEventByIdResponses, PatchEventData, PatchEventResponses, UpdateEventData, UpdateEventResponses, Delete2Data, Delete2Responses, FindById2Data, FindById2Responses, Patch1Data, Patch1Responses, Update2Data, Update2Responses, GetAllUsersSimpleData, GetAllUsersSimpleResponses, CreateUserData, CreateUserResponses, FindAllTrainersData, FindAllTrainersResponses, CreateTrainerAndUserData, CreateTrainerAndUserResponses, FindAllData, FindAllResponses, CreateData, CreateResponses, FindAll1Data, FindAll1Responses, Create1Data, Create1Responses, FindAllEventsData, FindAllEventsResponses, CreateEventData, CreateEventResponses, LogoutData, LogoutResponses, LoginData, LoginResponses, FindAll2Data, FindAll2Responses, Create2Data, Create2Responses, Patch2Data, Patch2Responses, RestoreData, RestoreResponses, Restore1Data, Restore1Responses, RestoreEventData, RestoreEventResponses, Restore2Data, Restore2Responses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const softDeleteTrainerUser = <ThrowOnError extends boolean = false>(options: Options<SoftDeleteTrainerUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SoftDeleteTrainerUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers/{id}',
        ...options
    });
};

export const findTrainerById = <ThrowOnError extends boolean = false>(options: Options<FindTrainerByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindTrainerByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers/{id}',
        ...options
    });
};

export const updateTrainerAndUser = <ThrowOnError extends boolean = false>(options: Options<UpdateTrainerAndUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTrainerAndUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const delete_ = <ThrowOnError extends boolean = false>(options: Options<DeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students/{id}',
        ...options
    });
};

export const findById = <ThrowOnError extends boolean = false>(options: Options<FindByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students/{id}',
        ...options
    });
};

export const update = <ThrowOnError extends boolean = false>(options: Options<UpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const delete1 = <ThrowOnError extends boolean = false>(options: Options<Delete1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<Delete1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}',
        ...options
    });
};

export const findById1 = <ThrowOnError extends boolean = false>(options: Options<FindById1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindById1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}',
        ...options
    });
};

export const patch = <ThrowOnError extends boolean = false>(options: Options<PatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const update1 = <ThrowOnError extends boolean = false>(options: Options<Update1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<Update1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteEvent = <ThrowOnError extends boolean = false>(options: Options<DeleteEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteEventResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}',
        ...options
    });
};

export const findEventById = <ThrowOnError extends boolean = false>(options: Options<FindEventByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindEventByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}',
        ...options
    });
};

export const patchEvent = <ThrowOnError extends boolean = false>(options: Options<PatchEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchEventResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateEvent = <ThrowOnError extends boolean = false>(options: Options<UpdateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateEventResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const delete2 = <ThrowOnError extends boolean = false>(options: Options<Delete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<Delete2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}',
        ...options
    });
};

export const findById2 = <ThrowOnError extends boolean = false>(options: Options<FindById2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindById2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}',
        ...options
    });
};

export const patch1 = <ThrowOnError extends boolean = false>(options: Options<Patch1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<Patch1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const update2 = <ThrowOnError extends boolean = false>(options: Options<Update2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<Update2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAllUsersSimple = <ThrowOnError extends boolean = false>(options: Options<GetAllUsersSimpleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllUsersSimpleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAllTrainers = <ThrowOnError extends boolean = false>(options?: Options<FindAllTrainersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FindAllTrainersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers',
        ...options
    });
};

export const createTrainerAndUser = <ThrowOnError extends boolean = false>(options: Options<CreateTrainerAndUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTrainerAndUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAll = <ThrowOnError extends boolean = false>(options: Options<FindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAllResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students',
        ...options
    });
};

export const create = <ThrowOnError extends boolean = false>(options: Options<CreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAll1 = <ThrowOnError extends boolean = false>(options: Options<FindAll1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAll1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises',
        ...options
    });
};

export const create1 = <ThrowOnError extends boolean = false>(options: Options<Create1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<Create1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAllEvents = <ThrowOnError extends boolean = false>(options: Options<FindAllEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAllEventsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events',
        ...options
    });
};

export const createEvent = <ThrowOnError extends boolean = false>(options: Options<CreateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEventResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/logout',
        ...options
    });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAll2 = <ThrowOnError extends boolean = false>(options: Options<FindAll2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAll2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators',
        ...options
    });
};

export const create2 = <ThrowOnError extends boolean = false>(options: Options<Create2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<Create2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const patch2 = <ThrowOnError extends boolean = false>(options: Options<Patch2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<Patch2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const restore = <ThrowOnError extends boolean = false>(options: Options<RestoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RestoreResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students/{id}/restore',
        ...options
    });
};

export const restore1 = <ThrowOnError extends boolean = false>(options: Options<Restore1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<Restore1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}/restore',
        ...options
    });
};

export const restoreEvent = <ThrowOnError extends boolean = false>(options: Options<RestoreEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RestoreEventResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}/restore',
        ...options
    });
};

export const restore2 = <ThrowOnError extends boolean = false>(options: Options<Restore2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<Restore2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}/restore',
        ...options
    });
};