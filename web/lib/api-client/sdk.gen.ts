// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { SoftDeleteTrainerUserData, SoftDeleteTrainerUserResponses, FindTrainerByIdData, FindTrainerByIdResponses, UpdateTrainerAndUserData, UpdateTrainerAndUserResponses, DeleteScheduleData, DeleteScheduleResponses, GetScheduleByIdData, GetScheduleByIdResponses, UpdateScheduleData, UpdateScheduleResponses, DeleteData, DeleteResponses, FindByIdData, FindByIdResponses, UpdateData, UpdateResponses, Delete1Data, Delete1Responses, FindById1Data, FindById1Responses, PatchData, PatchResponses, Update1Data, Update1Responses, Delete2Data, Delete2Responses, FindById2Data, FindById2Responses, Patch1Data, Patch1Responses, Update2Data, Update2Responses, GetAllUsersSimpleData, GetAllUsersSimpleResponses, CreateUserData, CreateUserResponses, FindAllTrainersData, FindAllTrainersResponses, CreateTrainerAndUserData, CreateTrainerAndUserResponses, GetAllSchedulesData, GetAllSchedulesResponses, CreateScheduleData, CreateScheduleResponses, FindAllData, FindAllResponses, CreateData, CreateResponses, UpdateSessionData, UpdateSessionResponses, GetAllPlansData, GetAllPlansResponses, CreatePlanData, CreatePlanResponses, AssignPlanToStudentData, AssignPlanToStudentResponses, FindAll1Data, FindAll1Responses, Create1Data, Create1Responses, UpdateCommitmentData, UpdateCommitmentResponses, BulkUpdateCommitmentsData, BulkUpdateCommitmentsResponses, LogoutData, LogoutResponses, LoginData, LoginResponses, FindAll2Data, FindAll2Responses, Create2Data, Create2Responses, Patch2Data, Patch2Responses, RestoreData, RestoreResponses, Restore1Data, Restore1Responses, Restore2Data, Restore2Responses, GetSchedulesByTrainerData, GetSchedulesByTrainerResponses, GetScheduleData, GetScheduleResponses, DeletePlanData, DeletePlanResponses, GetPlanByIdData, GetPlanByIdResponses, GetStudentPlanHistoryData, GetStudentPlanHistoryResponses, GetCurrentStudentPlanData, GetCurrentStudentPlanResponses, GetExpiringSoonAssignmentsData, GetExpiringSoonAssignmentsResponses, GetAllActiveAssignmentsData, GetAllActiveAssignmentsResponses, GetStudentCommitmentsData, GetStudentCommitmentsResponses, GetCurrentCommitmentStatusData, GetCurrentCommitmentStatusResponses, GetCommitmentHistoryData, GetCommitmentHistoryResponses, GetCurrentActiveCommitmentsData, GetCurrentActiveCommitmentsResponses, GetSessionSeriesCommitmentsData, GetSessionSeriesCommitmentsResponses, GetAvailableSessionSeriesData, GetAvailableSessionSeriesResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const softDeleteTrainerUser = <ThrowOnError extends boolean = false>(options: Options<SoftDeleteTrainerUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SoftDeleteTrainerUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers/{id}',
        ...options
    });
};

export const findTrainerById = <ThrowOnError extends boolean = false>(options: Options<FindTrainerByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindTrainerByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers/{id}',
        ...options
    });
};

export const updateTrainerAndUser = <ThrowOnError extends boolean = false>(options: Options<UpdateTrainerAndUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTrainerAndUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteSchedule = <ThrowOnError extends boolean = false>(options: Options<DeleteScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteScheduleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainer-schedules/{id}',
        ...options
    });
};

export const getScheduleById = <ThrowOnError extends boolean = false>(options: Options<GetScheduleByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScheduleByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainer-schedules/{id}',
        ...options
    });
};

export const updateSchedule = <ThrowOnError extends boolean = false>(options: Options<UpdateScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateScheduleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainer-schedules/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const delete_ = <ThrowOnError extends boolean = false>(options: Options<DeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students/{id}',
        ...options
    });
};

export const findById = <ThrowOnError extends boolean = false>(options: Options<FindByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students/{id}',
        ...options
    });
};

export const update = <ThrowOnError extends boolean = false>(options: Options<UpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const delete1 = <ThrowOnError extends boolean = false>(options: Options<Delete1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<Delete1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}',
        ...options
    });
};

export const findById1 = <ThrowOnError extends boolean = false>(options: Options<FindById1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindById1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}',
        ...options
    });
};

export const patch = <ThrowOnError extends boolean = false>(options: Options<PatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const update1 = <ThrowOnError extends boolean = false>(options: Options<Update1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<Update1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const delete2 = <ThrowOnError extends boolean = false>(options: Options<Delete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<Delete2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}',
        ...options
    });
};

export const findById2 = <ThrowOnError extends boolean = false>(options: Options<FindById2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindById2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}',
        ...options
    });
};

export const patch1 = <ThrowOnError extends boolean = false>(options: Options<Patch1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<Patch1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const update2 = <ThrowOnError extends boolean = false>(options: Options<Update2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<Update2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAllUsersSimple = <ThrowOnError extends boolean = false>(options: Options<GetAllUsersSimpleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllUsersSimpleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAllTrainers = <ThrowOnError extends boolean = false>(options?: Options<FindAllTrainersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FindAllTrainersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers',
        ...options
    });
};

export const createTrainerAndUser = <ThrowOnError extends boolean = false>(options: Options<CreateTrainerAndUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTrainerAndUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAllSchedules = <ThrowOnError extends boolean = false>(options?: Options<GetAllSchedulesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllSchedulesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainer-schedules',
        ...options
    });
};

export const createSchedule = <ThrowOnError extends boolean = false>(options: Options<CreateScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateScheduleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainer-schedules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAll = <ThrowOnError extends boolean = false>(options: Options<FindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAllResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students',
        ...options
    });
};

export const create = <ThrowOnError extends boolean = false>(options: Options<CreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateSession = <ThrowOnError extends boolean = false>(options: Options<UpdateSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateSessionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/sessions/{sessionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAllPlans = <ThrowOnError extends boolean = false>(options?: Options<GetAllPlansData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllPlansResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans',
        ...options
    });
};

export const createPlan = <ThrowOnError extends boolean = false>(options: Options<CreatePlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePlanResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const assignPlanToStudent = <ThrowOnError extends boolean = false>(options: Options<AssignPlanToStudentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignPlanToStudentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/students/{studentId}/assign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAll1 = <ThrowOnError extends boolean = false>(options: Options<FindAll1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAll1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises',
        ...options
    });
};

export const create1 = <ThrowOnError extends boolean = false>(options: Options<Create1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<Create1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateCommitment = <ThrowOnError extends boolean = false>(options: Options<UpdateCommitmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateCommitmentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/students/{studentId}/sessions/{sessionSeriesId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const bulkUpdateCommitments = <ThrowOnError extends boolean = false>(options: Options<BulkUpdateCommitmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BulkUpdateCommitmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/students/{studentId}/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/logout',
        ...options
    });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAll2 = <ThrowOnError extends boolean = false>(options: Options<FindAll2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAll2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators',
        ...options
    });
};

export const create2 = <ThrowOnError extends boolean = false>(options: Options<Create2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<Create2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const patch2 = <ThrowOnError extends boolean = false>(options: Options<Patch2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<Patch2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const restore = <ThrowOnError extends boolean = false>(options: Options<RestoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RestoreResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students/{id}/restore',
        ...options
    });
};

export const restore1 = <ThrowOnError extends boolean = false>(options: Options<Restore1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<Restore1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}/restore',
        ...options
    });
};

export const restore2 = <ThrowOnError extends boolean = false>(options: Options<Restore2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<Restore2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}/restore',
        ...options
    });
};

export const getSchedulesByTrainer = <ThrowOnError extends boolean = false>(options: Options<GetSchedulesByTrainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSchedulesByTrainerResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainer-schedules/trainer/{trainerId}',
        ...options
    });
};

export const getSchedule = <ThrowOnError extends boolean = false>(options: Options<GetScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScheduleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule',
        ...options
    });
};

export const deletePlan = <ThrowOnError extends boolean = false>(options: Options<DeletePlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePlanResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/{planId}',
        ...options
    });
};

export const getPlanById = <ThrowOnError extends boolean = false>(options: Options<GetPlanByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlanByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/{planId}',
        ...options
    });
};

export const getStudentPlanHistory = <ThrowOnError extends boolean = false>(options: Options<GetStudentPlanHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStudentPlanHistoryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/students/{studentId}/history',
        ...options
    });
};

export const getCurrentStudentPlan = <ThrowOnError extends boolean = false>(options: Options<GetCurrentStudentPlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCurrentStudentPlanResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/students/{studentId}/current',
        ...options
    });
};

export const getExpiringSoonAssignments = <ThrowOnError extends boolean = false>(options?: Options<GetExpiringSoonAssignmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetExpiringSoonAssignmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/assignments/expiring-soon',
        ...options
    });
};

export const getAllActiveAssignments = <ThrowOnError extends boolean = false>(options?: Options<GetAllActiveAssignmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllActiveAssignmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/assignments/active',
        ...options
    });
};

export const getStudentCommitments = <ThrowOnError extends boolean = false>(options: Options<GetStudentCommitmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStudentCommitmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/students/{studentId}',
        ...options
    });
};

export const getCurrentCommitmentStatus = <ThrowOnError extends boolean = false>(options: Options<GetCurrentCommitmentStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCurrentCommitmentStatusResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/students/{studentId}/sessions/{sessionSeriesId}/status',
        ...options
    });
};

export const getCommitmentHistory = <ThrowOnError extends boolean = false>(options: Options<GetCommitmentHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommitmentHistoryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/students/{studentId}/sessions/{sessionSeriesId}/history',
        ...options
    });
};

export const getCurrentActiveCommitments = <ThrowOnError extends boolean = false>(options: Options<GetCurrentActiveCommitmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCurrentActiveCommitmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/students/{studentId}/active',
        ...options
    });
};

export const getSessionSeriesCommitments = <ThrowOnError extends boolean = false>(options: Options<GetSessionSeriesCommitmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionSeriesCommitmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/sessions/{sessionSeriesId}',
        ...options
    });
};

export const getAvailableSessionSeries = <ThrowOnError extends boolean = false>(options?: Options<GetAvailableSessionSeriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAvailableSessionSeriesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/available-sessions',
        ...options
    });
};