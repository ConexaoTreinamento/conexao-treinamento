// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { SoftDeleteTrainerUserData, SoftDeleteTrainerUserResponses, FindTrainerByIdData, FindTrainerByIdResponses, UpdateTrainerAndUserData, UpdateTrainerAndUserResponses, DeleteScheduleData, DeleteScheduleResponses, GetScheduleByIdData, GetScheduleByIdResponses, UpdateScheduleData, UpdateScheduleResponses, DeleteStudentData, DeleteStudentResponses, FindStudentByIdData, FindStudentByIdResponses, UpdateStudentData, UpdateStudentResponses, DeleteExerciseData, DeleteExerciseResponses, FindExerciseByIdData, FindExerciseByIdResponses, PatchExerciseData, PatchExerciseResponses, UpdateExerciseData, UpdateExerciseResponses, DeleteEventData, DeleteEventResponses, FindEventByIdData, FindEventByIdResponses, PatchEventData, PatchEventResponses, UpdateEventData, UpdateEventResponses, DeleteAdministratorData, DeleteAdministratorResponses, FindAdministratorByIdData, FindAdministratorByIdResponses, PatchAdministratorData, PatchAdministratorResponses, UpdateAdministratorData, UpdateAdministratorResponses, GetAllUsersSimpleData, GetAllUsersSimpleResponses, CreateUserData, CreateUserResponses, FindAllTrainersData, FindAllTrainersResponses, CreateTrainerAndUserData, CreateTrainerAndUserResponses, GetAllSchedulesData, GetAllSchedulesResponses, CreateScheduleData, CreateScheduleResponses, FindAllStudentsData, FindAllStudentsResponses, CreateStudentData, CreateStudentResponses, GetSessionData, GetSessionResponses, UpdateSessionData, UpdateSessionResponses, UpdateSessionTrainerData, UpdateSessionTrainerResponses, AddSessionParticipantData, AddSessionParticipantResponses, UpdatePresenceData, UpdatePresenceResponses, AddRegisteredParticipantExerciseData, AddRegisteredParticipantExerciseResponses, CancelOrRestoreSessionData, CancelOrRestoreSessionResponses, CreateOneOffSessionData, CreateOneOffSessionResponses, GetAllPlansData, GetAllPlansResponses, CreatePlanData, CreatePlanResponses, AssignPlanToStudentData, AssignPlanToStudentResponses, FindAllExercisesData, FindAllExercisesResponses, CreateExerciseData, CreateExerciseResponses, FindAllEventsData, FindAllEventsResponses, CreateEventData, CreateEventResponses, RemoveParticipantData, RemoveParticipantResponses, AddParticipantData, AddParticipantResponses, UpdateCommitmentData, UpdateCommitmentResponses, BulkUpdateCommitmentsData, BulkUpdateCommitmentsResponses, LogoutData, LogoutResponses, LoginData, LoginResponses, FindAllAdministratorsData, FindAllAdministratorsResponses, CreateAdministratorData, CreateAdministratorResponses, PatchData, PatchResponses, RestoreStudentData, RestoreStudentResponses, RemoveRegisteredParticipantExerciseData, RemoveRegisteredParticipantExerciseResponses, UpdateRegisteredParticipantExerciseData, UpdateRegisteredParticipantExerciseResponses, RestoreExerciseData, RestoreExerciseResponses, RestoreEventData, RestoreEventResponses, ToggleAttendanceData, ToggleAttendanceResponses, RestoreAdministratorData, RestoreAdministratorResponses, FindTrainerByUserIdData, FindTrainerByUserIdResponses, GetSchedulesByTrainerData, GetSchedulesByTrainerResponses, GetScheduleData, GetScheduleResponses, DeletePlanData, DeletePlanResponses, GetPlanByIdData, GetPlanByIdResponses, GetStudentPlanHistoryData, GetStudentPlanHistoryResponses, GetCurrentStudentPlanData, GetCurrentStudentPlanResponses, GetExpiringSoonAssignmentsData, GetExpiringSoonAssignmentsResponses, GetAllActiveAssignmentsData, GetAllActiveAssignmentsResponses, GetTrainersForLookupData, GetTrainersForLookupResponses, GetStudentsForLookupData, GetStudentsForLookupResponses, GetStudentCommitmentsData, GetStudentCommitmentsResponses, GetCurrentCommitmentStatusData, GetCurrentCommitmentStatusResponses, GetCommitmentHistoryData, GetCommitmentHistoryResponses, GetCurrentActiveCommitmentsData, GetCurrentActiveCommitmentsResponses, GetSessionSeriesCommitmentsData, GetSessionSeriesCommitmentsResponses, GetAvailableSessionSeriesData, GetAvailableSessionSeriesResponses, RemoveSessionParticipantData, RemoveSessionParticipantResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const softDeleteTrainerUser = <ThrowOnError extends boolean = false>(options: Options<SoftDeleteTrainerUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SoftDeleteTrainerUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers/{id}',
        ...options
    });
};

export const findTrainerById = <ThrowOnError extends boolean = false>(options: Options<FindTrainerByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindTrainerByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers/{id}',
        ...options
    });
};

export const updateTrainerAndUser = <ThrowOnError extends boolean = false>(options: Options<UpdateTrainerAndUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTrainerAndUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteSchedule = <ThrowOnError extends boolean = false>(options: Options<DeleteScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteScheduleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainer-schedules/{id}',
        ...options
    });
};

export const getScheduleById = <ThrowOnError extends boolean = false>(options: Options<GetScheduleByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScheduleByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainer-schedules/{id}',
        ...options
    });
};

export const updateSchedule = <ThrowOnError extends boolean = false>(options: Options<UpdateScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateScheduleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainer-schedules/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteStudent = <ThrowOnError extends boolean = false>(options: Options<DeleteStudentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteStudentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students/{id}',
        ...options
    });
};

export const findStudentById = <ThrowOnError extends boolean = false>(options: Options<FindStudentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindStudentByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students/{id}',
        ...options
    });
};

export const updateStudent = <ThrowOnError extends boolean = false>(options: Options<UpdateStudentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateStudentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteExercise = <ThrowOnError extends boolean = false>(options: Options<DeleteExerciseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteExerciseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}',
        ...options
    });
};

export const findExerciseById = <ThrowOnError extends boolean = false>(options: Options<FindExerciseByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindExerciseByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}',
        ...options
    });
};

export const patchExercise = <ThrowOnError extends boolean = false>(options: Options<PatchExerciseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchExerciseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateExercise = <ThrowOnError extends boolean = false>(options: Options<UpdateExerciseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateExerciseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteEvent = <ThrowOnError extends boolean = false>(options: Options<DeleteEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteEventResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}',
        ...options
    });
};

export const findEventById = <ThrowOnError extends boolean = false>(options: Options<FindEventByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindEventByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}',
        ...options
    });
};

export const patchEvent = <ThrowOnError extends boolean = false>(options: Options<PatchEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchEventResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateEvent = <ThrowOnError extends boolean = false>(options: Options<UpdateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateEventResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteAdministrator = <ThrowOnError extends boolean = false>(options: Options<DeleteAdministratorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAdministratorResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}',
        ...options
    });
};

export const findAdministratorById = <ThrowOnError extends boolean = false>(options: Options<FindAdministratorByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAdministratorByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}',
        ...options
    });
};

export const patchAdministrator = <ThrowOnError extends boolean = false>(options: Options<PatchAdministratorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchAdministratorResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateAdministrator = <ThrowOnError extends boolean = false>(options: Options<UpdateAdministratorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAdministratorResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAllUsersSimple = <ThrowOnError extends boolean = false>(options: Options<GetAllUsersSimpleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllUsersSimpleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAllTrainers = <ThrowOnError extends boolean = false>(options?: Options<FindAllTrainersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FindAllTrainersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers',
        ...options
    });
};

export const createTrainerAndUser = <ThrowOnError extends boolean = false>(options: Options<CreateTrainerAndUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTrainerAndUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAllSchedules = <ThrowOnError extends boolean = false>(options?: Options<GetAllSchedulesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllSchedulesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainer-schedules',
        ...options
    });
};

export const createSchedule = <ThrowOnError extends boolean = false>(options: Options<CreateScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateScheduleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainer-schedules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAllStudents = <ThrowOnError extends boolean = false>(options: Options<FindAllStudentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAllStudentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students',
        ...options
    });
};

export const createStudent = <ThrowOnError extends boolean = false>(options: Options<CreateStudentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateStudentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getSession = <ThrowOnError extends boolean = false>(options: Options<GetSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/sessions/{sessionId}',
        ...options
    });
};

export const updateSession = <ThrowOnError extends boolean = false>(options: Options<UpdateSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateSessionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/sessions/{sessionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateSessionTrainer = <ThrowOnError extends boolean = false>(options: Options<UpdateSessionTrainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateSessionTrainerResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/sessions/{sessionId}/trainer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const addSessionParticipant = <ThrowOnError extends boolean = false>(options: Options<AddSessionParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddSessionParticipantResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/sessions/{sessionId}/participants',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updatePresence = <ThrowOnError extends boolean = false>(options: Options<UpdatePresenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdatePresenceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/sessions/{sessionId}/participants/{studentId}/presence',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const addRegisteredParticipantExercise = <ThrowOnError extends boolean = false>(options: Options<AddRegisteredParticipantExerciseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddRegisteredParticipantExerciseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/sessions/{sessionId}/participants/{studentId}/exercises',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const cancelOrRestoreSession = <ThrowOnError extends boolean = false>(options: Options<CancelOrRestoreSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CancelOrRestoreSessionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/sessions/{sessionId}/cancel',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const createOneOffSession = <ThrowOnError extends boolean = false>(options: Options<CreateOneOffSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOneOffSessionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/sessions/one-off',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAllPlans = <ThrowOnError extends boolean = false>(options?: Options<GetAllPlansData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllPlansResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans',
        ...options
    });
};

export const createPlan = <ThrowOnError extends boolean = false>(options: Options<CreatePlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePlanResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const assignPlanToStudent = <ThrowOnError extends boolean = false>(options: Options<AssignPlanToStudentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignPlanToStudentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/students/{studentId}/assign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAllExercises = <ThrowOnError extends boolean = false>(options: Options<FindAllExercisesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAllExercisesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises',
        ...options
    });
};

export const createExercise = <ThrowOnError extends boolean = false>(options: Options<CreateExerciseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateExerciseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAllEvents = <ThrowOnError extends boolean = false>(options?: Options<FindAllEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FindAllEventsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events',
        ...options
    });
};

export const createEvent = <ThrowOnError extends boolean = false>(options: Options<CreateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEventResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const removeParticipant = <ThrowOnError extends boolean = false>(options: Options<RemoveParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveParticipantResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}/participants/{studentId}',
        ...options
    });
};

export const addParticipant = <ThrowOnError extends boolean = false>(options: Options<AddParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddParticipantResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}/participants/{studentId}',
        ...options
    });
};

export const updateCommitment = <ThrowOnError extends boolean = false>(options: Options<UpdateCommitmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateCommitmentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/students/{studentId}/sessions/{sessionSeriesId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const bulkUpdateCommitments = <ThrowOnError extends boolean = false>(options: Options<BulkUpdateCommitmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BulkUpdateCommitmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/students/{studentId}/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/logout',
        ...options
    });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, unknown, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findAllAdministrators = <ThrowOnError extends boolean = false>(options: Options<FindAllAdministratorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindAllAdministratorsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators',
        ...options
    });
};

export const createAdministrator = <ThrowOnError extends boolean = false>(options: Options<CreateAdministratorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAdministratorResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const patch = <ThrowOnError extends boolean = false>(options: Options<PatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const restoreStudent = <ThrowOnError extends boolean = false>(options: Options<RestoreStudentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RestoreStudentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/students/{id}/restore',
        ...options
    });
};

export const removeRegisteredParticipantExercise = <ThrowOnError extends boolean = false>(options: Options<RemoveRegisteredParticipantExerciseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveRegisteredParticipantExerciseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/sessions/participants/exercises/{exerciseRecordId}',
        ...options
    });
};

export const updateRegisteredParticipantExercise = <ThrowOnError extends boolean = false>(options: Options<UpdateRegisteredParticipantExerciseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateRegisteredParticipantExerciseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/sessions/participants/exercises/{exerciseRecordId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const restoreExercise = <ThrowOnError extends boolean = false>(options: Options<RestoreExerciseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RestoreExerciseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/exercises/{id}/restore',
        ...options
    });
};

export const restoreEvent = <ThrowOnError extends boolean = false>(options: Options<RestoreEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RestoreEventResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}/restore',
        ...options
    });
};

export const toggleAttendance = <ThrowOnError extends boolean = false>(options: Options<ToggleAttendanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ToggleAttendanceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{id}/participants/{studentId}/attendance',
        ...options
    });
};

export const restoreAdministrator = <ThrowOnError extends boolean = false>(options: Options<RestoreAdministratorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RestoreAdministratorResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/administrators/{id}/restore',
        ...options
    });
};

export const findTrainerByUserId = <ThrowOnError extends boolean = false>(options: Options<FindTrainerByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindTrainerByUserIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainers/userId/{id}',
        ...options
    });
};

export const getSchedulesByTrainer = <ThrowOnError extends boolean = false>(options: Options<GetSchedulesByTrainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSchedulesByTrainerResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/trainer-schedules/trainer/{trainerId}',
        ...options
    });
};

export const getSchedule = <ThrowOnError extends boolean = false>(options: Options<GetScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScheduleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule',
        ...options
    });
};

export const deletePlan = <ThrowOnError extends boolean = false>(options: Options<DeletePlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePlanResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/{planId}',
        ...options
    });
};

export const getPlanById = <ThrowOnError extends boolean = false>(options: Options<GetPlanByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlanByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/{planId}',
        ...options
    });
};

export const getStudentPlanHistory = <ThrowOnError extends boolean = false>(options: Options<GetStudentPlanHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStudentPlanHistoryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/students/{studentId}/history',
        ...options
    });
};

export const getCurrentStudentPlan = <ThrowOnError extends boolean = false>(options: Options<GetCurrentStudentPlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCurrentStudentPlanResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/students/{studentId}/current',
        ...options
    });
};

export const getExpiringSoonAssignments = <ThrowOnError extends boolean = false>(options?: Options<GetExpiringSoonAssignmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetExpiringSoonAssignmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/assignments/expiring-soon',
        ...options
    });
};

export const getAllActiveAssignments = <ThrowOnError extends boolean = false>(options?: Options<GetAllActiveAssignmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllActiveAssignmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plans/assignments/active',
        ...options
    });
};

export const getTrainersForLookup = <ThrowOnError extends boolean = false>(options?: Options<GetTrainersForLookupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTrainersForLookupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/lookup/trainers',
        ...options
    });
};

export const getStudentsForLookup = <ThrowOnError extends boolean = false>(options?: Options<GetStudentsForLookupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStudentsForLookupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/lookup/students',
        ...options
    });
};

export const getStudentCommitments = <ThrowOnError extends boolean = false>(options: Options<GetStudentCommitmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStudentCommitmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/students/{studentId}',
        ...options
    });
};

export const getCurrentCommitmentStatus = <ThrowOnError extends boolean = false>(options: Options<GetCurrentCommitmentStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCurrentCommitmentStatusResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/students/{studentId}/sessions/{sessionSeriesId}/status',
        ...options
    });
};

export const getCommitmentHistory = <ThrowOnError extends boolean = false>(options: Options<GetCommitmentHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommitmentHistoryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/students/{studentId}/sessions/{sessionSeriesId}/history',
        ...options
    });
};

export const getCurrentActiveCommitments = <ThrowOnError extends boolean = false>(options: Options<GetCurrentActiveCommitmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCurrentActiveCommitmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/students/{studentId}/active',
        ...options
    });
};

export const getSessionSeriesCommitments = <ThrowOnError extends boolean = false>(options: Options<GetSessionSeriesCommitmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionSeriesCommitmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/sessions/{sessionSeriesId}',
        ...options
    });
};

export const getAvailableSessionSeries = <ThrowOnError extends boolean = false>(options?: Options<GetAvailableSessionSeriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAvailableSessionSeriesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/commitments/available-sessions',
        ...options
    });
};

export const removeSessionParticipant = <ThrowOnError extends boolean = false>(options: Options<RemoveSessionParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveSessionParticipantResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/sessions/{sessionId}/participants/{studentId}',
        ...options
    });
};