services:
  postgres:
    image: postgres:16
    container_name: dev-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: conexaotreinamento
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d conexaotreinamento"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: conexao-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/conexaotreinamento
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres123
      CORS_ALLOWED_ORIGINS: http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: conexao-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge