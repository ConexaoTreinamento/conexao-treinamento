name: CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests Using Cache Maven
    runs-on: ubuntu-22.04
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: conexaotreinamento
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_PORT: 5432
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Backend Tests
        working-directory: ./backend
        run: |
          chmod +x ./mvnw
          ./mvnw verify -Dspring.profiles.active=test

  docker-build-scan:
    name: Docker Build
    runs-on: ubuntu-22.04
    needs: [backend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start services
        run: |
          docker-compose -f docker-compose.test.yml --env-file .env.test up -d
          sleep 30 # Wait for services to be ready

      - name: Run Smoke Tests
        run: |
          curl -f http://localhost:8080/actuator/health
          curl -f http://localhost:3000

      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml --env-file .env.test down

      - name: Clean up failed images
        if: failure()
        run: |
          echo "Cleaning up failed images..."
          docker rmi conexao-backend-test:latest || true
          docker image prune -f
          docker volume prune -f
          echo "Cleanup completed"
