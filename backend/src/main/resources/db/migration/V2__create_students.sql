CREATE TYPE insomnia_frequency AS ENUM ('yes', 'no', 'sometimes');
CREATE TYPE physical_impairment_type AS ENUM ('motor', 'sensory', 'cognitive', 'other');

CREATE TABLE STUDENTS (
    STUDENT_ID UUID PRIMARY KEY,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    SURNAME VARCHAR(100) NOT NULL,
    GENDER CHAR NOT NULL CHECK (GENDER IN ('M', 'F', 'O')),
    BIRTH_DATE DATE NOT NULL,
    PHONE VARCHAR(20),
    PROFESSION VARCHAR(100),
    STREET VARCHAR(255),
    NUMBER VARCHAR(20),
    COMPLEMENT VARCHAR(255),
    NEIGHBORHOOD VARCHAR(255),
    CEP VARCHAR(10),
    REGISTRATION_DATE DATE DEFAULT CURRENT_DATE,
    EMERGENCY_CONTACT_NAME VARCHAR(255),
    EMERGENCY_CONTACT_PHONE VARCHAR(20),
    EMERGENCY_CONTACT_RELATIONSHIP VARCHAR(255),
    OBJECTIVES VARCHAR(255),
    CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    DELETED_AT TIMESTAMP
);

CREATE TABLE ANAMNESIS (
    STUDENT_ID UUID PRIMARY KEY,
    MEDICATION VARCHAR(255),
    IS_DOCTOR_AWARE_OF_PHYSICAL_ACTIVITY BOOLEAN,
    FAVORITE_PHYSICAL_ACTIVITY VARCHAR(255),
    HAS_INSOMNIA insomnia_frequency,
    DIET_ORIENTED_BY VARCHAR(255),
    CARDIAC_PROBLEMS VARCHAR(255),
    HAS_HYPERTENSION BOOLEAN,
    CHRONIC_DISEASES VARCHAR(255),
    DIFFICULTIES_IN_PHYSICAL_ACTIVITIES VARCHAR(255),
    MEDICAL_ORIENTATIONS_TO_AVOID_PHYSICAL_ACTIVITY VARCHAR(255),
    SURGERIES_IN_THE_LAST_12_MONTHS VARCHAR(255),
    RESPIRATORY_PROBLEMS VARCHAR(255),
    JOINT_MUSCULAR_BACK_PAIN VARCHAR(255),
    SPINAL_DISC_PROBLEMS VARCHAR(255),
    DIABETES VARCHAR(255), 
    SMOKING_DURATION VARCHAR(100), 
    ALTERED_CHOLESTEROL BOOLEAN,
    OSTEOPOROSIS_LOCATION VARCHAR(255), 
    OBJECTIVES VARCHAR(255),
    CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    CONSTRAINT FK_ANAMNESIS_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS (STUDENT_ID) ON DELETE CASCADE
);

CREATE TABLE PHYSICAL_IMPAIRMENTS (
    ID UUID PRIMARY KEY,
    STUDENT_ID UUID NOT NULL,
    IMPAIRMENT_TYPE physical_impairment_type NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    OBSERVATIONS VARCHAR(255),
    CONSTRAINT FK_PHYSICAL_IMPAIRMENTS_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES ANAMNESIS (STUDENT_ID) ON DELETE CASCADE
);

CREATE TABLE PLANS (
    ID UUID PRIMARY KEY,
    DISPLAY_NAME VARCHAR(255) NOT NULL,
    DURATION_IN_MONTHS INT NOT NULL,
    MONTHLY_PRICE DECIMAL(10, 2) NOT NULL,
    MAX_DAYS_PER_WEEK INT NOT NULL,
    CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    DELETED_AT TIMESTAMP
);

CREATE TABLE CONTRACTS (
    CONTRACT_ID UUID NOT NULL,
    STUDENT_ID UUID NOT NULL,
    PLAN_ID UUID NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    CONSTRAINT FK_CONTRACTS_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS (STUDENT_ID) ON DELETE RESTRICT,
    CONSTRAINT FK_CONTRACTS_PLAN FOREIGN KEY (PLAN_ID) REFERENCES PLANS (ID) ON DELETE RESTRICT,
    CONSTRAINT CHK_DATES CHECK (END_DATE >= START_DATE)
);

CREATE VIEW ACTIVE_CONTRACTS AS
SELECT
    c.CONTRACT_ID,
    c.STUDENT_ID,
    c.PLAN_ID,
    c.START_DATE,
    c.END_DATE,
    s.NAME,
    s.SURNAME,
    s.EMAIL,
    p.DISPLAY_NAME AS PLAN_NAME,
    p.MONTHLY_PRICE,
    p.DURATION_IN_MONTHS,
    p.MAX_DAYS_PER_WEEK
FROM CONTRACTS c
INNER JOIN STUDENTS s ON c.STUDENT_ID = s.STUDENT_ID
INNER JOIN PLANS p ON c.PLAN_ID = p.ID
WHERE c.END_DATE >= CURRENT_DATE;

CREATE OR REPLACE FUNCTION prevent_contracts_modification()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        RAISE EXCEPTION 'DELETE operations are not allowed on CONTRACTS table. This is an append-only table.';
    END IF;

    IF TG_OP = 'UPDATE' THEN
        RAISE EXCEPTION 'UPDATE operations are not allowed on CONTRACTS table. This is an append-only table.';
    END IF;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_prevent_contracts_modification
    BEFORE UPDATE OR DELETE ON CONTRACTS
    FOR EACH ROW
    EXECUTE FUNCTION prevent_contracts_modification();

CREATE INDEX IDX_CONTRACTS_CONTRACT_ID ON CONTRACTS (CONTRACT_ID);
CREATE INDEX IDX_CONTRACTS_STUDENT_ID ON CONTRACTS (STUDENT_ID);
CREATE INDEX IDX_CONTRACTS_PLAN_ID ON CONTRACTS (PLAN_ID);
CREATE INDEX IDX_CONTRACTS_DATES ON CONTRACTS (START_DATE, END_DATE);

CREATE INDEX IDX_STUDENTS_EMAIL ON STUDENTS (EMAIL);
CREATE INDEX IDX_STUDENTS_CREATED_AT ON STUDENTS (CREATED_AT);
CREATE INDEX IDX_STUDENTS_NAME_SURNAME ON STUDENTS (NAME, SURNAME);
CREATE INDEX IDX_STUDENTS_DELETED_AT ON STUDENTS (DELETED_AT);

CREATE INDEX IDX_ANAMNESIS_STUDENT_ID ON ANAMNESIS (STUDENT_ID);
CREATE INDEX IDX_ANAMNESIS_HAS_INSOMNIA ON ANAMNESIS (HAS_INSOMNIA);
CREATE INDEX IDX_ANAMNESIS_DIET_ORIENTED_BY ON ANAMNESIS (DIET_ORIENTED_BY);

CREATE INDEX IDX_PHYSICAL_IMPAIRMENTS_STUDENT_ID ON PHYSICAL_IMPAIRMENTS (STUDENT_ID);
CREATE INDEX IDX_PHYSICAL_IMPAIRMENTS_TYPE ON PHYSICAL_IMPAIRMENTS (IMPAIRMENT_TYPE);
