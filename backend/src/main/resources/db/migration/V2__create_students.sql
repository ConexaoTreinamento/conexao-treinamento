CREATE TABLE STUDENTS (
    STUDENT_ID VARCHAR(36) PRIMARY KEY,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    NOME VARCHAR(255) NOT NULL,
    SURNAME VARCHAR(255) NOT NULL,
    SEX VARCHAR(10) NOT NULL CHECK (SEX IN ('M', 'F', 'OTHER')),
    BIRTH_DATE DATE NOT NULL,
    PHONE VARCHAR(20),
    PROFESSION VARCHAR(255),
    STREET VARCHAR(255),
    NUMBER VARCHAR(20),
    COMPLEMENT VARCHAR(255),
    NEIGHBORHOOD VARCHAR(255),
    CEP VARCHAR(10),
    REGISTRATION_DATE DATE DEFAULT CURRENT_DATE,
    EMERGENCY_CONTACT_NAME VARCHAR(255),
    EMERGENCY_CONTACT_PHONE VARCHAR(20),
    EMERGENCY_CONTACT_RELATIONSHIP VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE ANAMNESIS (
    ID VARCHAR(36) PRIMARY KEY,
    STUDENT_ID VARCHAR(36) NOT NULL,
    IS_DOCTOR_AWARE_OF_PHYSICAL_ACTIVITY BOOLEAN,
    HAS_INSOMNIA VARCHAR(20) CHECK (HAS_INSOMNIA IN ('YES', 'NO', 'SOMETIMES')),
    DIET_ORIENTED_BY VARCHAR(255),
    HAS_HIPERTENSION BOOLEAN,
    DIABETES VARCHAR(255),
    TIME_SMOKING VARCHAR(255),
    ALTERED_CHOLESTEROL BOOLEAN,
    OSTEOPOROSIS_LOCALE VARCHAR(255),
    MEDICATIONS TEXT,
    CARDIOVASCULAR_PROBLEMS TEXT,
    CHRONIC_DISEASES TEXT,
    PHYSICAL_DIFFICULTIES TEXT,
    MEDICAL_ORIENTATIONS TEXT,
    SURGERIES_LAST_12_MONTHS TEXT,
    RESPIRATORY_PROBLEMS TEXT,
    JOINT_MUSCULAR_BACK_PAIN TEXT,
    SPINE_PROBLEMS TEXT,
    PHYSICAL_IMPAIRMENTS TEXT,
    OBJECTIVES TEXT,
    FAVORITE_PHYSICAL_ACTIVITY VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_ANAMNESIS_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS (STUDENT_ID) ON DELETE CASCADE
);

CREATE TABLE PLANS (
    ID VARCHAR(36) PRIMARY KEY,
    DISPLAY_NAME VARCHAR(255) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DURATION_IN_MONTHS INT NOT NULL,
    MONTHLY_PRICE DECIMAL(10, 2) NOT NULL,
    MAX_DAYS_PER_WEEK INT NOT NULL
);

-- Create the event-sourced contracts table (replacing simple CONTRACTS table)
CREATE TABLE CONTRACT_EVENTS (
    EVENT_ID VARCHAR(36) PRIMARY KEY,
    CONTRACT_ID VARCHAR(36) NOT NULL,
    STUDENT_ID VARCHAR(36) NOT NULL,
    PLAN_ID VARCHAR(36) NOT NULL,
    EVENT_TYPE VARCHAR(20) NOT NULL CHECK (EVENT_TYPE IN ('CREATED', 'ACTIVATED', 'SUSPENDED', 'CANCELLED', 'RENEWED')),
    EVENT_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    MONTHLY_PRICE DECIMAL(10, 2) NOT NULL,
    DURATION_IN_MONTHS INT NOT NULL,
    MAX_DAYS_PER_WEEK INT NOT NULL,
    NOTES TEXT,
    CREATED_BY VARCHAR(255),
    METADATA JSON,
    CONSTRAINT FK_CONTRACT_EVENTS_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS (STUDENT_ID) ON DELETE RESTRICT,
    CONSTRAINT FK_CONTRACT_EVENTS_PLAN FOREIGN KEY (PLAN_ID) REFERENCES PLANS (ID) ON DELETE RESTRICT,
    CONSTRAINT CHK_DATES CHECK (END_DATE >= START_DATE)
);

CREATE VIEW ACTIVE_CONTRACTS AS
SELECT
    ce.CONTRACT_ID,
    ce.STUDENT_ID,
    ce.PLAN_ID,
    ce.START_DATE,
    ce.END_DATE,
    ce.MONTHLY_PRICE,
    ce.DURATION_IN_MONTHS,
    ce.MAX_DAYS_PER_WEEK,
    ce.EVENT_TIMESTAMP AS LAST_EVENT_TIMESTAMP,
    s.NOME,
    s.SURNAME,
    s.EMAIL,
    p.DISPLAY_NAME AS PLAN_NAME
FROM CONTRACT_EVENTS ce
INNER JOIN (
    SELECT
        CONTRACT_ID,
        MAX(EVENT_TIMESTAMP) AS LATEST_EVENT_TIMESTAMP
    FROM CONTRACT_EVENTS
    GROUP BY CONTRACT_ID
) latest ON ce.CONTRACT_ID = latest.CONTRACT_ID
    AND ce.EVENT_TIMESTAMP = latest.LATEST_EVENT_TIMESTAMP
INNER JOIN STUDENTS s ON ce.STUDENT_ID = s.STUDENT_ID
INNER JOIN PLANS p ON ce.PLAN_ID = p.ID
WHERE ce.EVENT_TYPE IN ('CREATED', 'ACTIVATED', 'RENEWED')
    AND ce.END_DATE >= CURRENT_DATE;

CREATE VIEW CONTRACT_HISTORY AS
SELECT
    ce.EVENT_ID,
    ce.CONTRACT_ID,
    ce.STUDENT_ID,
    ce.PLAN_ID,
    ce.EVENT_TYPE,
    ce.EVENT_TIMESTAMP,
    ce.START_DATE,
    ce.END_DATE,
    ce.MONTHLY_PRICE,
    ce.DURATION_IN_MONTHS,
    ce.MAX_DAYS_PER_WEEK,
    ce.NOTES,
    ce.CREATED_BY,
    s.NOME,
    s.SURNAME,
    s.EMAIL,
    p.DISPLAY_NAME AS PLAN_NAME
FROM CONTRACT_EVENTS ce
INNER JOIN STUDENTS s ON ce.STUDENT_ID = s.STUDENT_ID
INNER JOIN PLANS p ON ce.PLAN_ID = p.ID
ORDER BY ce.CONTRACT_ID, ce.EVENT_TIMESTAMP;

CREATE OR REPLACE FUNCTION prevent_contract_events_modification()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        RAISE EXCEPTION 'DELETE operations are not allowed on CONTRACT_EVENTS table. This is an append-only table.';
    END IF;

    IF TG_OP = 'UPDATE' THEN
        RAISE EXCEPTION 'UPDATE operations are not allowed on CONTRACT_EVENTS table. This is an append-only table.';
    END IF;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_prevent_contract_events_modification
    BEFORE UPDATE OR DELETE ON CONTRACT_EVENTS
    FOR EACH ROW
    EXECUTE FUNCTION prevent_contract_events_modification();

CREATE INDEX IDX_CONTRACT_EVENTS_CONTRACT_ID ON CONTRACT_EVENTS (CONTRACT_ID);
CREATE INDEX IDX_CONTRACT_EVENTS_STUDENT_ID ON CONTRACT_EVENTS (STUDENT_ID);
CREATE INDEX IDX_CONTRACT_EVENTS_EVENT_TYPE ON CONTRACT_EVENTS (EVENT_TYPE);
CREATE INDEX IDX_CONTRACT_EVENTS_TIMESTAMP ON CONTRACT_EVENTS (EVENT_TIMESTAMP);
CREATE INDEX IDX_CONTRACT_EVENTS_DATES ON CONTRACT_EVENTS (START_DATE, END_DATE);

CREATE INDEX IDX_STUDENTS_EMAIL ON STUDENTS (EMAIL);
CREATE INDEX IDX_STUDENTS_REGISTRATION_DATE ON STUDENTS (REGISTRATION_DATE);